<?php
/**
 * WebhookManageApi
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Документация к Анкетолог API (beta-версия)
 *
 * ### Библиотеки для работы с API  * **PHP** https://github.com/anketolog/AnketologClient-php  ### Библиотеки на других языках  Вы можете самостоятельно сгенерировать библиотеку, [на любом доступном языке](https://github.com/swagger-api/swagger-codegen#api-clients), воспользовавшись [генератором](http://swagger.io/swagger-codegen). Конфигурационный файл можно скачать по [этой ссылке](https://anketolog.ru/api/external/v2/anketolog.yaml).  ### Работа с API  Работа с API осуществляется при помощи отправки POST-запросов на адрес:  ``` https://apiv2.anketolog.ru/{resource} ```  Необходимые параметры передаются в теле запроса в виде JSON-строки:  ``` {     \"survey_id\": \"ID опроса\" } ```  Для авторизации необходимо передать заголовок **X-Anketolog-ApiKey** в запросе:  ``` X-Anketolog-ApiKey: API_KEY ```  Ключ доступа к API можно получить в [разделе настроек](https://anketolog.ru/user/account/apikey).   ### Пример запроса  ``` curl -X POST \\   --header 'X-Anketolog-ApiKey: API_KEY' \\   -d '{\"survey_id\": \"ID опроса\"}' \\   'https://apiv2.anketolog.ru/survey/manage/info' ```
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Api;

use \AnketologClient\Configuration;
use \AnketologClient\ApiClient;
use \AnketologClient\ApiException;
use \AnketologClient\ObjectSerializer;

/**
 * WebhookManageApi Class Doc Comment
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhookManageApi
{

    /**
     * API Client
     *
     * @var \AnketologClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \AnketologClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\AnketologClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apiv2.anketolog.ru/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \AnketologClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \AnketologClient\ApiClient $apiClient set the API client
     *
     * @return WebhookManageApi
     */
    public function setApiClient(\AnketologClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation webhookManageCreate
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookManageCreateBody $webhook_manage_create_body  (required)
     * @return \AnketologClient\Model\Webhook
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageCreate($webhook_manage_create_body)
    {
        list($response) = $this->webhookManageCreateWithHttpInfo($webhook_manage_create_body);
        return $response;
    }

    /**
     * Operation webhookManageCreateWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookManageCreateBody $webhook_manage_create_body  (required)
     * @return Array of \AnketologClient\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageCreateWithHttpInfo($webhook_manage_create_body)
    {
        // verify the required parameter 'webhook_manage_create_body' is set
        if ($webhook_manage_create_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_manage_create_body when calling webhookManageCreate');
        }
        // parse inputs
        $resourcePath = "/webhook/manage/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_manage_create_body)) {
            $_tempBody = $webhook_manage_create_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\Webhook',
                '/webhook/manage/create'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\Webhook', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\Webhook', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookManageInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookManageInfoBody $webhook_manage_info_body  (required)
     * @return \AnketologClient\Model\Webhook
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageInfo($webhook_manage_info_body)
    {
        list($response) = $this->webhookManageInfoWithHttpInfo($webhook_manage_info_body);
        return $response;
    }

    /**
     * Operation webhookManageInfoWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookManageInfoBody $webhook_manage_info_body  (required)
     * @return Array of \AnketologClient\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageInfoWithHttpInfo($webhook_manage_info_body)
    {
        // verify the required parameter 'webhook_manage_info_body' is set
        if ($webhook_manage_info_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_manage_info_body when calling webhookManageInfo');
        }
        // parse inputs
        $resourcePath = "/webhook/manage/info";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_manage_info_body)) {
            $_tempBody = $webhook_manage_info_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\Webhook',
                '/webhook/manage/info'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\Webhook', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\Webhook', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookManageList
     *
     * 
     *
     * @return \AnketologClient\Model\Webhook[]
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageList()
    {
        list($response) = $this->webhookManageListWithHttpInfo();
        return $response;
    }

    /**
     * Operation webhookManageListWithHttpInfo
     *
     * 
     *
     * @return Array of \AnketologClient\Model\Webhook[], HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageListWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/webhook/manage/list";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\Webhook[]',
                '/webhook/manage/list'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\Webhook[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\Webhook[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookManageRemove
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookManageRemoveBody $webhook_manage_remove_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageRemove($webhook_manage_remove_body)
    {
        list($response) = $this->webhookManageRemoveWithHttpInfo($webhook_manage_remove_body);
        return $response;
    }

    /**
     * Operation webhookManageRemoveWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookManageRemoveBody $webhook_manage_remove_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageRemoveWithHttpInfo($webhook_manage_remove_body)
    {
        // verify the required parameter 'webhook_manage_remove_body' is set
        if ($webhook_manage_remove_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_manage_remove_body when calling webhookManageRemove');
        }
        // parse inputs
        $resourcePath = "/webhook/manage/remove";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_manage_remove_body)) {
            $_tempBody = $webhook_manage_remove_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/webhook/manage/remove'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookManageUpdate
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookManageUpdateBody $webhook_manage_update_body  (required)
     * @return \AnketologClient\Model\Webhook
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageUpdate($webhook_manage_update_body)
    {
        list($response) = $this->webhookManageUpdateWithHttpInfo($webhook_manage_update_body);
        return $response;
    }

    /**
     * Operation webhookManageUpdateWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookManageUpdateBody $webhook_manage_update_body  (required)
     * @return Array of \AnketologClient\Model\Webhook, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookManageUpdateWithHttpInfo($webhook_manage_update_body)
    {
        // verify the required parameter 'webhook_manage_update_body' is set
        if ($webhook_manage_update_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_manage_update_body when calling webhookManageUpdate');
        }
        // parse inputs
        $resourcePath = "/webhook/manage/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_manage_update_body)) {
            $_tempBody = $webhook_manage_update_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\Webhook',
                '/webhook/manage/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\Webhook', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\Webhook', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookUrlAdd
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlAddBody $webhook_url_add_body  (required)
     * @return \AnketologClient\Model\WebhookUrl[]
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlAdd($webhook_url_add_body)
    {
        list($response) = $this->webhookUrlAddWithHttpInfo($webhook_url_add_body);
        return $response;
    }

    /**
     * Operation webhookUrlAddWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlAddBody $webhook_url_add_body  (required)
     * @return Array of \AnketologClient\Model\WebhookUrl[], HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlAddWithHttpInfo($webhook_url_add_body)
    {
        // verify the required parameter 'webhook_url_add_body' is set
        if ($webhook_url_add_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_url_add_body when calling webhookUrlAdd');
        }
        // parse inputs
        $resourcePath = "/webhook/url/add";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_url_add_body)) {
            $_tempBody = $webhook_url_add_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\WebhookUrl[]',
                '/webhook/url/add'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\WebhookUrl[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\WebhookUrl[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookUrlInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlInfoBody $webhook_url_info_body  (required)
     * @return \AnketologClient\Model\WebhookUrl
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlInfo($webhook_url_info_body)
    {
        list($response) = $this->webhookUrlInfoWithHttpInfo($webhook_url_info_body);
        return $response;
    }

    /**
     * Operation webhookUrlInfoWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlInfoBody $webhook_url_info_body  (required)
     * @return Array of \AnketologClient\Model\WebhookUrl, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlInfoWithHttpInfo($webhook_url_info_body)
    {
        // verify the required parameter 'webhook_url_info_body' is set
        if ($webhook_url_info_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_url_info_body when calling webhookUrlInfo');
        }
        // parse inputs
        $resourcePath = "/webhook/url/info";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_url_info_body)) {
            $_tempBody = $webhook_url_info_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\WebhookUrl',
                '/webhook/url/info'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\WebhookUrl', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\WebhookUrl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookUrlList
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlListBody $webhook_url_list_body  (required)
     * @return \AnketologClient\Model\WebhookUrl[]
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlList($webhook_url_list_body)
    {
        list($response) = $this->webhookUrlListWithHttpInfo($webhook_url_list_body);
        return $response;
    }

    /**
     * Operation webhookUrlListWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlListBody $webhook_url_list_body  (required)
     * @return Array of \AnketologClient\Model\WebhookUrl[], HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlListWithHttpInfo($webhook_url_list_body)
    {
        // verify the required parameter 'webhook_url_list_body' is set
        if ($webhook_url_list_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_url_list_body when calling webhookUrlList');
        }
        // parse inputs
        $resourcePath = "/webhook/url/list";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_url_list_body)) {
            $_tempBody = $webhook_url_list_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\WebhookUrl[]',
                '/webhook/url/list'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\WebhookUrl[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\WebhookUrl[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookUrlRemove
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlRemoveBody $webhook_url_remove_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlRemove($webhook_url_remove_body)
    {
        list($response) = $this->webhookUrlRemoveWithHttpInfo($webhook_url_remove_body);
        return $response;
    }

    /**
     * Operation webhookUrlRemoveWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlRemoveBody $webhook_url_remove_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlRemoveWithHttpInfo($webhook_url_remove_body)
    {
        // verify the required parameter 'webhook_url_remove_body' is set
        if ($webhook_url_remove_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_url_remove_body when calling webhookUrlRemove');
        }
        // parse inputs
        $resourcePath = "/webhook/url/remove";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_url_remove_body)) {
            $_tempBody = $webhook_url_remove_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/webhook/url/remove'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation webhookUrlUpdate
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlUpdateBody $webhook_url_update_body  (required)
     * @return \AnketologClient\Model\WebhookUrl
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlUpdate($webhook_url_update_body)
    {
        list($response) = $this->webhookUrlUpdateWithHttpInfo($webhook_url_update_body);
        return $response;
    }

    /**
     * Operation webhookUrlUpdateWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\WebhookUrlUpdateBody $webhook_url_update_body  (required)
     * @return Array of \AnketologClient\Model\WebhookUrl, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function webhookUrlUpdateWithHttpInfo($webhook_url_update_body)
    {
        // verify the required parameter 'webhook_url_update_body' is set
        if ($webhook_url_update_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $webhook_url_update_body when calling webhookUrlUpdate');
        }
        // parse inputs
        $resourcePath = "/webhook/url/update";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($webhook_url_update_body)) {
            $_tempBody = $webhook_url_update_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\WebhookUrl',
                '/webhook/url/update'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\WebhookUrl', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\WebhookUrl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
