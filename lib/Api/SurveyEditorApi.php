<?php
/**
 * SurveyEditorApi
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Документация к Анкетолог API (beta-версия)
 *
 * ### Библиотеки для работы с API  * **PHP** https://github.com/anketolog/AnketologClient-php  ### Библиотеки на других языках  Вы можете самостоятельно сгенерировать библиотеку, [на любом доступном языке](https://github.com/swagger-api/swagger-codegen#api-clients), воспользовавшись [генератором](http://swagger.io/swagger-codegen). Конфигурационный файл можно скачать по [этой ссылке](https://anketolog.ru/api/external/v2/anketolog.yaml).  ### Работа с API  Работа с API осуществляется при помощи отправки POST-запросов на адрес:  ``` https://apiv2.anketolog.ru/{resource} ```  Необходимые параметры передаются в теле запроса в виде JSON-строки:  ``` {     \"survey_id\": \"ID опроса\" } ```  Для авторизации необходимо передать заголовок **X-Anketolog-ApiKey** в запросе:  ``` X-Anketolog-ApiKey: API_KEY ```  Ключ доступа к API можно получить в [разделе настроек](https://anketolog.ru/user/account/apikey).   ### Пример запроса  ``` curl -X POST \\   --header 'X-Anketolog-ApiKey: API_KEY' \\   -d '{\"survey_id\": \"ID опроса\"}' \\   'https://apiv2.anketolog.ru/survey/manage/info' ```  ### Webhook  Webhook – это уведомление сторонних приложений о событиях, произошедших на сайте anketolog.ru, путем отправки уведомлений. Во время возникновения события сервер посылает POST-запрос по адресу, который указан в URL. Настроить Webhook можно в [разделе настроек](https://anketolog.loc/user/account/apikey).
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Api;

use \AnketologClient\Configuration;
use \AnketologClient\ApiClient;
use \AnketologClient\ApiException;
use \AnketologClient\ObjectSerializer;

/**
 * SurveyEditorApi Class Doc Comment
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SurveyEditorApi
{

    /**
     * API Client
     *
     * @var \AnketologClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \AnketologClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\AnketologClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apiv2.anketolog.ru/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \AnketologClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \AnketologClient\ApiClient $apiClient set the API client
     *
     * @return SurveyEditorApi
     */
    public function setApiClient(\AnketologClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation surveyEditorAddBranchrule
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddBranchruleBody $survey_editor_add_branchrule_body  (required)
     * @return \AnketologClient\Model\SurveyBranchrule
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddBranchrule($survey_editor_add_branchrule_body)
    {
        list($response) = $this->surveyEditorAddBranchruleWithHttpInfo($survey_editor_add_branchrule_body);
        return $response;
    }

    /**
     * Operation surveyEditorAddBranchruleWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddBranchruleBody $survey_editor_add_branchrule_body  (required)
     * @return Array of \AnketologClient\Model\SurveyBranchrule, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddBranchruleWithHttpInfo($survey_editor_add_branchrule_body)
    {
        // verify the required parameter 'survey_editor_add_branchrule_body' is set
        if ($survey_editor_add_branchrule_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_add_branchrule_body when calling surveyEditorAddBranchrule');
        }
        // parse inputs
        $resourcePath = "/survey/editor/addBranchrule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_add_branchrule_body)) {
            $_tempBody = $survey_editor_add_branchrule_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyBranchrule',
                '/survey/editor/addBranchrule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyBranchrule', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyBranchrule', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorAddOption
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddOptionBody $survey_editor_add_option_body  (required)
     * @return \AnketologClient\Model\SurveyOption
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddOption($survey_editor_add_option_body)
    {
        list($response) = $this->surveyEditorAddOptionWithHttpInfo($survey_editor_add_option_body);
        return $response;
    }

    /**
     * Operation surveyEditorAddOptionWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddOptionBody $survey_editor_add_option_body  (required)
     * @return Array of \AnketologClient\Model\SurveyOption, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddOptionWithHttpInfo($survey_editor_add_option_body)
    {
        // verify the required parameter 'survey_editor_add_option_body' is set
        if ($survey_editor_add_option_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_add_option_body when calling surveyEditorAddOption');
        }
        // parse inputs
        $resourcePath = "/survey/editor/addOption";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_add_option_body)) {
            $_tempBody = $survey_editor_add_option_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyOption',
                '/survey/editor/addOption'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyOption', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyOption', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorAddOptionValue
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddOptionValueBody $survey_editor_add_option_value_body  (required)
     * @return \AnketologClient\Model\SurveyOptionValue
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddOptionValue($survey_editor_add_option_value_body)
    {
        list($response) = $this->surveyEditorAddOptionValueWithHttpInfo($survey_editor_add_option_value_body);
        return $response;
    }

    /**
     * Operation surveyEditorAddOptionValueWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddOptionValueBody $survey_editor_add_option_value_body  (required)
     * @return Array of \AnketologClient\Model\SurveyOptionValue, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddOptionValueWithHttpInfo($survey_editor_add_option_value_body)
    {
        // verify the required parameter 'survey_editor_add_option_value_body' is set
        if ($survey_editor_add_option_value_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_add_option_value_body when calling surveyEditorAddOptionValue');
        }
        // parse inputs
        $resourcePath = "/survey/editor/addOptionValue";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_add_option_value_body)) {
            $_tempBody = $survey_editor_add_option_value_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyOptionValue',
                '/survey/editor/addOptionValue'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyOptionValue', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyOptionValue', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorAddPage
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddPageBody $survey_editor_add_page_body  (required)
     * @return \AnketologClient\Model\SurveyPage
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddPage($survey_editor_add_page_body)
    {
        list($response) = $this->surveyEditorAddPageWithHttpInfo($survey_editor_add_page_body);
        return $response;
    }

    /**
     * Operation surveyEditorAddPageWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddPageBody $survey_editor_add_page_body  (required)
     * @return Array of \AnketologClient\Model\SurveyPage, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddPageWithHttpInfo($survey_editor_add_page_body)
    {
        // verify the required parameter 'survey_editor_add_page_body' is set
        if ($survey_editor_add_page_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_add_page_body when calling surveyEditorAddPage');
        }
        // parse inputs
        $resourcePath = "/survey/editor/addPage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_add_page_body)) {
            $_tempBody = $survey_editor_add_page_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyPage',
                '/survey/editor/addPage'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyPage', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyPage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorAddQuestion
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddQuestionBody $survey_editor_add_question_body  (required)
     * @return \AnketologClient\Model\SurveyQuestion
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddQuestion($survey_editor_add_question_body)
    {
        list($response) = $this->surveyEditorAddQuestionWithHttpInfo($survey_editor_add_question_body);
        return $response;
    }

    /**
     * Operation surveyEditorAddQuestionWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddQuestionBody $survey_editor_add_question_body  (required)
     * @return Array of \AnketologClient\Model\SurveyQuestion, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddQuestionWithHttpInfo($survey_editor_add_question_body)
    {
        // verify the required parameter 'survey_editor_add_question_body' is set
        if ($survey_editor_add_question_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_add_question_body when calling surveyEditorAddQuestion');
        }
        // parse inputs
        $resourcePath = "/survey/editor/addQuestion";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_add_question_body)) {
            $_tempBody = $survey_editor_add_question_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyQuestion',
                '/survey/editor/addQuestion'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyQuestion', $httpHeader, 'swagger_type'), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyQuestion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorAddRange
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddRangeBody $survey_editor_add_range_body  (required)
     * @return \AnketologClient\Model\SurveyRange
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddRange($survey_editor_add_range_body)
    {
        list($response) = $this->surveyEditorAddRangeWithHttpInfo($survey_editor_add_range_body);
        return $response;
    }

    /**
     * Operation surveyEditorAddRangeWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddRangeBody $survey_editor_add_range_body  (required)
     * @return Array of \AnketologClient\Model\SurveyRange, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddRangeWithHttpInfo($survey_editor_add_range_body)
    {
        // verify the required parameter 'survey_editor_add_range_body' is set
        if ($survey_editor_add_range_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_add_range_body when calling surveyEditorAddRange');
        }
        // parse inputs
        $resourcePath = "/survey/editor/addRange";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_add_range_body)) {
            $_tempBody = $survey_editor_add_range_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyRange',
                '/survey/editor/addRange'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyRange', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyRange', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorAddRow
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddRowBody $survey_editor_add_row_body  (required)
     * @return \AnketologClient\Model\SurveyRow
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddRow($survey_editor_add_row_body)
    {
        list($response) = $this->surveyEditorAddRowWithHttpInfo($survey_editor_add_row_body);
        return $response;
    }

    /**
     * Operation surveyEditorAddRowWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddRowBody $survey_editor_add_row_body  (required)
     * @return Array of \AnketologClient\Model\SurveyRow, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddRowWithHttpInfo($survey_editor_add_row_body)
    {
        // verify the required parameter 'survey_editor_add_row_body' is set
        if ($survey_editor_add_row_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_add_row_body when calling surveyEditorAddRow');
        }
        // parse inputs
        $resourcePath = "/survey/editor/addRow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_add_row_body)) {
            $_tempBody = $survey_editor_add_row_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyRow',
                '/survey/editor/addRow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyRow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyRow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorAddVisiblerule
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddVisibleruleBody $survey_editor_add_visiblerule_body  (required)
     * @return \AnketologClient\Model\SurveyVisiblerule
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddVisiblerule($survey_editor_add_visiblerule_body)
    {
        list($response) = $this->surveyEditorAddVisibleruleWithHttpInfo($survey_editor_add_visiblerule_body);
        return $response;
    }

    /**
     * Operation surveyEditorAddVisibleruleWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorAddVisibleruleBody $survey_editor_add_visiblerule_body  (required)
     * @return Array of \AnketologClient\Model\SurveyVisiblerule, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorAddVisibleruleWithHttpInfo($survey_editor_add_visiblerule_body)
    {
        // verify the required parameter 'survey_editor_add_visiblerule_body' is set
        if ($survey_editor_add_visiblerule_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_add_visiblerule_body when calling surveyEditorAddVisiblerule');
        }
        // parse inputs
        $resourcePath = "/survey/editor/addVisiblerule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_add_visiblerule_body)) {
            $_tempBody = $survey_editor_add_visiblerule_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyVisiblerule',
                '/survey/editor/addVisiblerule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyVisiblerule', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyVisiblerule', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorMoveBranchrule
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveBranchruleBody $survey_editor_move_branchrule_body  (required)
     * @return \AnketologClient\Model\SurveyBranchrule
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveBranchrule($survey_editor_move_branchrule_body)
    {
        list($response) = $this->surveyEditorMoveBranchruleWithHttpInfo($survey_editor_move_branchrule_body);
        return $response;
    }

    /**
     * Operation surveyEditorMoveBranchruleWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveBranchruleBody $survey_editor_move_branchrule_body  (required)
     * @return Array of \AnketologClient\Model\SurveyBranchrule, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveBranchruleWithHttpInfo($survey_editor_move_branchrule_body)
    {
        // verify the required parameter 'survey_editor_move_branchrule_body' is set
        if ($survey_editor_move_branchrule_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_move_branchrule_body when calling surveyEditorMoveBranchrule');
        }
        // parse inputs
        $resourcePath = "/survey/editor/moveBranchrule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_move_branchrule_body)) {
            $_tempBody = $survey_editor_move_branchrule_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyBranchrule',
                '/survey/editor/moveBranchrule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyBranchrule', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyBranchrule', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorMoveOption
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveOptionBody $survey_editor_move_option_body  (required)
     * @return \AnketologClient\Model\SurveyOption
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveOption($survey_editor_move_option_body)
    {
        list($response) = $this->surveyEditorMoveOptionWithHttpInfo($survey_editor_move_option_body);
        return $response;
    }

    /**
     * Operation surveyEditorMoveOptionWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveOptionBody $survey_editor_move_option_body  (required)
     * @return Array of \AnketologClient\Model\SurveyOption, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveOptionWithHttpInfo($survey_editor_move_option_body)
    {
        // verify the required parameter 'survey_editor_move_option_body' is set
        if ($survey_editor_move_option_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_move_option_body when calling surveyEditorMoveOption');
        }
        // parse inputs
        $resourcePath = "/survey/editor/moveOption";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_move_option_body)) {
            $_tempBody = $survey_editor_move_option_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyOption',
                '/survey/editor/moveOption'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyOption', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyOption', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorMoveOptionValue
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveOptionValueBody $survey_editor_move_option_value_body  (required)
     * @return \AnketologClient\Model\SurveyOptionValue
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveOptionValue($survey_editor_move_option_value_body)
    {
        list($response) = $this->surveyEditorMoveOptionValueWithHttpInfo($survey_editor_move_option_value_body);
        return $response;
    }

    /**
     * Operation surveyEditorMoveOptionValueWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveOptionValueBody $survey_editor_move_option_value_body  (required)
     * @return Array of \AnketologClient\Model\SurveyOptionValue, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveOptionValueWithHttpInfo($survey_editor_move_option_value_body)
    {
        // verify the required parameter 'survey_editor_move_option_value_body' is set
        if ($survey_editor_move_option_value_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_move_option_value_body when calling surveyEditorMoveOptionValue');
        }
        // parse inputs
        $resourcePath = "/survey/editor/moveOptionValue";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_move_option_value_body)) {
            $_tempBody = $survey_editor_move_option_value_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyOptionValue',
                '/survey/editor/moveOptionValue'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyOptionValue', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyOptionValue', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorMovePage
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMovePageBody $survey_editor_move_page_body  (required)
     * @return \AnketologClient\Model\SurveyPage
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMovePage($survey_editor_move_page_body)
    {
        list($response) = $this->surveyEditorMovePageWithHttpInfo($survey_editor_move_page_body);
        return $response;
    }

    /**
     * Operation surveyEditorMovePageWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMovePageBody $survey_editor_move_page_body  (required)
     * @return Array of \AnketologClient\Model\SurveyPage, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMovePageWithHttpInfo($survey_editor_move_page_body)
    {
        // verify the required parameter 'survey_editor_move_page_body' is set
        if ($survey_editor_move_page_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_move_page_body when calling surveyEditorMovePage');
        }
        // parse inputs
        $resourcePath = "/survey/editor/movePage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_move_page_body)) {
            $_tempBody = $survey_editor_move_page_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyPage',
                '/survey/editor/movePage'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyPage', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyPage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorMoveQuestion
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveQuestionBody $survey_editor_move_question_body  (required)
     * @return \AnketologClient\Model\SurveyQuestion
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveQuestion($survey_editor_move_question_body)
    {
        list($response) = $this->surveyEditorMoveQuestionWithHttpInfo($survey_editor_move_question_body);
        return $response;
    }

    /**
     * Operation surveyEditorMoveQuestionWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveQuestionBody $survey_editor_move_question_body  (required)
     * @return Array of \AnketologClient\Model\SurveyQuestion, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveQuestionWithHttpInfo($survey_editor_move_question_body)
    {
        // verify the required parameter 'survey_editor_move_question_body' is set
        if ($survey_editor_move_question_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_move_question_body when calling surveyEditorMoveQuestion');
        }
        // parse inputs
        $resourcePath = "/survey/editor/moveQuestion";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_move_question_body)) {
            $_tempBody = $survey_editor_move_question_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyQuestion',
                '/survey/editor/moveQuestion'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyQuestion', $httpHeader, 'swagger_type'), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyQuestion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorMoveRange
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveRangeBody $survey_editor_move_range_body  (required)
     * @return \AnketologClient\Model\SurveyRange
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveRange($survey_editor_move_range_body)
    {
        list($response) = $this->surveyEditorMoveRangeWithHttpInfo($survey_editor_move_range_body);
        return $response;
    }

    /**
     * Operation surveyEditorMoveRangeWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveRangeBody $survey_editor_move_range_body  (required)
     * @return Array of \AnketologClient\Model\SurveyRange, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveRangeWithHttpInfo($survey_editor_move_range_body)
    {
        // verify the required parameter 'survey_editor_move_range_body' is set
        if ($survey_editor_move_range_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_move_range_body when calling surveyEditorMoveRange');
        }
        // parse inputs
        $resourcePath = "/survey/editor/moveRange";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_move_range_body)) {
            $_tempBody = $survey_editor_move_range_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyRange',
                '/survey/editor/moveRange'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyRange', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyRange', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorMoveRow
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveRowBody $survey_editor_move_row_body  (required)
     * @return \AnketologClient\Model\SurveyRow
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveRow($survey_editor_move_row_body)
    {
        list($response) = $this->surveyEditorMoveRowWithHttpInfo($survey_editor_move_row_body);
        return $response;
    }

    /**
     * Operation surveyEditorMoveRowWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveRowBody $survey_editor_move_row_body  (required)
     * @return Array of \AnketologClient\Model\SurveyRow, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveRowWithHttpInfo($survey_editor_move_row_body)
    {
        // verify the required parameter 'survey_editor_move_row_body' is set
        if ($survey_editor_move_row_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_move_row_body when calling surveyEditorMoveRow');
        }
        // parse inputs
        $resourcePath = "/survey/editor/moveRow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_move_row_body)) {
            $_tempBody = $survey_editor_move_row_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyRow',
                '/survey/editor/moveRow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyRow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyRow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorMoveVisiblerule
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveVisibleruleBody $survey_editor_move_visiblerule_body  (required)
     * @return \AnketologClient\Model\SurveyVisiblerule
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveVisiblerule($survey_editor_move_visiblerule_body)
    {
        list($response) = $this->surveyEditorMoveVisibleruleWithHttpInfo($survey_editor_move_visiblerule_body);
        return $response;
    }

    /**
     * Operation surveyEditorMoveVisibleruleWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorMoveVisibleruleBody $survey_editor_move_visiblerule_body  (required)
     * @return Array of \AnketologClient\Model\SurveyVisiblerule, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorMoveVisibleruleWithHttpInfo($survey_editor_move_visiblerule_body)
    {
        // verify the required parameter 'survey_editor_move_visiblerule_body' is set
        if ($survey_editor_move_visiblerule_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_move_visiblerule_body when calling surveyEditorMoveVisiblerule');
        }
        // parse inputs
        $resourcePath = "/survey/editor/moveVisiblerule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_move_visiblerule_body)) {
            $_tempBody = $survey_editor_move_visiblerule_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyVisiblerule',
                '/survey/editor/moveVisiblerule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyVisiblerule', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyVisiblerule', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorRemoveBranchrule
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveBranchruleBody $survey_editor_remove_branchrule_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveBranchrule($survey_editor_remove_branchrule_body)
    {
        list($response) = $this->surveyEditorRemoveBranchruleWithHttpInfo($survey_editor_remove_branchrule_body);
        return $response;
    }

    /**
     * Operation surveyEditorRemoveBranchruleWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveBranchruleBody $survey_editor_remove_branchrule_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveBranchruleWithHttpInfo($survey_editor_remove_branchrule_body)
    {
        // verify the required parameter 'survey_editor_remove_branchrule_body' is set
        if ($survey_editor_remove_branchrule_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_remove_branchrule_body when calling surveyEditorRemoveBranchrule');
        }
        // parse inputs
        $resourcePath = "/survey/editor/removeBranchrule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_remove_branchrule_body)) {
            $_tempBody = $survey_editor_remove_branchrule_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/editor/removeBranchrule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorRemoveOption
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveOptionBody $survey_editor_remove_option_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveOption($survey_editor_remove_option_body)
    {
        list($response) = $this->surveyEditorRemoveOptionWithHttpInfo($survey_editor_remove_option_body);
        return $response;
    }

    /**
     * Operation surveyEditorRemoveOptionWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveOptionBody $survey_editor_remove_option_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveOptionWithHttpInfo($survey_editor_remove_option_body)
    {
        // verify the required parameter 'survey_editor_remove_option_body' is set
        if ($survey_editor_remove_option_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_remove_option_body when calling surveyEditorRemoveOption');
        }
        // parse inputs
        $resourcePath = "/survey/editor/removeOption";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_remove_option_body)) {
            $_tempBody = $survey_editor_remove_option_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/editor/removeOption'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorRemoveOptionValue
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveOptionValueBody $survey_editor_remove_option_value_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveOptionValue($survey_editor_remove_option_value_body)
    {
        list($response) = $this->surveyEditorRemoveOptionValueWithHttpInfo($survey_editor_remove_option_value_body);
        return $response;
    }

    /**
     * Operation surveyEditorRemoveOptionValueWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveOptionValueBody $survey_editor_remove_option_value_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveOptionValueWithHttpInfo($survey_editor_remove_option_value_body)
    {
        // verify the required parameter 'survey_editor_remove_option_value_body' is set
        if ($survey_editor_remove_option_value_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_remove_option_value_body when calling surveyEditorRemoveOptionValue');
        }
        // parse inputs
        $resourcePath = "/survey/editor/removeOptionValue";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_remove_option_value_body)) {
            $_tempBody = $survey_editor_remove_option_value_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/editor/removeOptionValue'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorRemovePage
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemovePageBody $survey_editor_remove_page_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemovePage($survey_editor_remove_page_body)
    {
        list($response) = $this->surveyEditorRemovePageWithHttpInfo($survey_editor_remove_page_body);
        return $response;
    }

    /**
     * Operation surveyEditorRemovePageWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemovePageBody $survey_editor_remove_page_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemovePageWithHttpInfo($survey_editor_remove_page_body)
    {
        // verify the required parameter 'survey_editor_remove_page_body' is set
        if ($survey_editor_remove_page_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_remove_page_body when calling surveyEditorRemovePage');
        }
        // parse inputs
        $resourcePath = "/survey/editor/removePage";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_remove_page_body)) {
            $_tempBody = $survey_editor_remove_page_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/editor/removePage'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorRemoveQuestion
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveQuestionBody $survey_editor_remove_question_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveQuestion($survey_editor_remove_question_body)
    {
        list($response) = $this->surveyEditorRemoveQuestionWithHttpInfo($survey_editor_remove_question_body);
        return $response;
    }

    /**
     * Operation surveyEditorRemoveQuestionWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveQuestionBody $survey_editor_remove_question_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveQuestionWithHttpInfo($survey_editor_remove_question_body)
    {
        // verify the required parameter 'survey_editor_remove_question_body' is set
        if ($survey_editor_remove_question_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_remove_question_body when calling surveyEditorRemoveQuestion');
        }
        // parse inputs
        $resourcePath = "/survey/editor/removeQuestion";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_remove_question_body)) {
            $_tempBody = $survey_editor_remove_question_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/editor/removeQuestion'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorRemoveRange
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveRangeBody $survey_editor_remove_range_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveRange($survey_editor_remove_range_body)
    {
        list($response) = $this->surveyEditorRemoveRangeWithHttpInfo($survey_editor_remove_range_body);
        return $response;
    }

    /**
     * Operation surveyEditorRemoveRangeWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveRangeBody $survey_editor_remove_range_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveRangeWithHttpInfo($survey_editor_remove_range_body)
    {
        // verify the required parameter 'survey_editor_remove_range_body' is set
        if ($survey_editor_remove_range_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_remove_range_body when calling surveyEditorRemoveRange');
        }
        // parse inputs
        $resourcePath = "/survey/editor/removeRange";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_remove_range_body)) {
            $_tempBody = $survey_editor_remove_range_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/editor/removeRange'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorRemoveRow
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveRowBody $survey_editor_remove_row_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveRow($survey_editor_remove_row_body)
    {
        list($response) = $this->surveyEditorRemoveRowWithHttpInfo($survey_editor_remove_row_body);
        return $response;
    }

    /**
     * Operation surveyEditorRemoveRowWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveRowBody $survey_editor_remove_row_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveRowWithHttpInfo($survey_editor_remove_row_body)
    {
        // verify the required parameter 'survey_editor_remove_row_body' is set
        if ($survey_editor_remove_row_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_remove_row_body when calling surveyEditorRemoveRow');
        }
        // parse inputs
        $resourcePath = "/survey/editor/removeRow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_remove_row_body)) {
            $_tempBody = $survey_editor_remove_row_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/editor/removeRow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorRemoveVisiblerule
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveVisibleruleBody $survey_editor_remove_visiblerule_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveVisiblerule($survey_editor_remove_visiblerule_body)
    {
        list($response) = $this->surveyEditorRemoveVisibleruleWithHttpInfo($survey_editor_remove_visiblerule_body);
        return $response;
    }

    /**
     * Operation surveyEditorRemoveVisibleruleWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorRemoveVisibleruleBody $survey_editor_remove_visiblerule_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorRemoveVisibleruleWithHttpInfo($survey_editor_remove_visiblerule_body)
    {
        // verify the required parameter 'survey_editor_remove_visiblerule_body' is set
        if ($survey_editor_remove_visiblerule_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_remove_visiblerule_body when calling surveyEditorRemoveVisiblerule');
        }
        // parse inputs
        $resourcePath = "/survey/editor/removeVisiblerule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_remove_visiblerule_body)) {
            $_tempBody = $survey_editor_remove_visiblerule_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/editor/removeVisiblerule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorUpdateBranchrule
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateBranchruleBody $survey_editor_update_branchrule_body  (required)
     * @return \AnketologClient\Model\SurveyBranchrule
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateBranchrule($survey_editor_update_branchrule_body)
    {
        list($response) = $this->surveyEditorUpdateBranchruleWithHttpInfo($survey_editor_update_branchrule_body);
        return $response;
    }

    /**
     * Operation surveyEditorUpdateBranchruleWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateBranchruleBody $survey_editor_update_branchrule_body  (required)
     * @return Array of \AnketologClient\Model\SurveyBranchrule, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateBranchruleWithHttpInfo($survey_editor_update_branchrule_body)
    {
        // verify the required parameter 'survey_editor_update_branchrule_body' is set
        if ($survey_editor_update_branchrule_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_update_branchrule_body when calling surveyEditorUpdateBranchrule');
        }
        // parse inputs
        $resourcePath = "/survey/editor/updateBranchrule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_update_branchrule_body)) {
            $_tempBody = $survey_editor_update_branchrule_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyBranchrule',
                '/survey/editor/updateBranchrule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyBranchrule', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyBranchrule', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorUpdateOption
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateOptionBody $survey_editor_update_option_body  (required)
     * @return \AnketologClient\Model\SurveyOption
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateOption($survey_editor_update_option_body)
    {
        list($response) = $this->surveyEditorUpdateOptionWithHttpInfo($survey_editor_update_option_body);
        return $response;
    }

    /**
     * Operation surveyEditorUpdateOptionWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateOptionBody $survey_editor_update_option_body  (required)
     * @return Array of \AnketologClient\Model\SurveyOption, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateOptionWithHttpInfo($survey_editor_update_option_body)
    {
        // verify the required parameter 'survey_editor_update_option_body' is set
        if ($survey_editor_update_option_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_update_option_body when calling surveyEditorUpdateOption');
        }
        // parse inputs
        $resourcePath = "/survey/editor/updateOption";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_update_option_body)) {
            $_tempBody = $survey_editor_update_option_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyOption',
                '/survey/editor/updateOption'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyOption', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyOption', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorUpdateOptionValue
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateOptionValueBody $survey_editor_update_option_value_body  (required)
     * @return \AnketologClient\Model\SurveyOptionValue
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateOptionValue($survey_editor_update_option_value_body)
    {
        list($response) = $this->surveyEditorUpdateOptionValueWithHttpInfo($survey_editor_update_option_value_body);
        return $response;
    }

    /**
     * Operation surveyEditorUpdateOptionValueWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateOptionValueBody $survey_editor_update_option_value_body  (required)
     * @return Array of \AnketologClient\Model\SurveyOptionValue, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateOptionValueWithHttpInfo($survey_editor_update_option_value_body)
    {
        // verify the required parameter 'survey_editor_update_option_value_body' is set
        if ($survey_editor_update_option_value_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_update_option_value_body when calling surveyEditorUpdateOptionValue');
        }
        // parse inputs
        $resourcePath = "/survey/editor/updateOptionValue";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_update_option_value_body)) {
            $_tempBody = $survey_editor_update_option_value_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyOptionValue',
                '/survey/editor/updateOptionValue'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyOptionValue', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyOptionValue', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorUpdateQuestion
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateQuestionBody $survey_editor_update_question_body  (required)
     * @return \AnketologClient\Model\SurveyQuestion
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateQuestion($survey_editor_update_question_body)
    {
        list($response) = $this->surveyEditorUpdateQuestionWithHttpInfo($survey_editor_update_question_body);
        return $response;
    }

    /**
     * Operation surveyEditorUpdateQuestionWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateQuestionBody $survey_editor_update_question_body  (required)
     * @return Array of \AnketologClient\Model\SurveyQuestion, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateQuestionWithHttpInfo($survey_editor_update_question_body)
    {
        // verify the required parameter 'survey_editor_update_question_body' is set
        if ($survey_editor_update_question_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_update_question_body when calling surveyEditorUpdateQuestion');
        }
        // parse inputs
        $resourcePath = "/survey/editor/updateQuestion";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_update_question_body)) {
            $_tempBody = $survey_editor_update_question_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyQuestion',
                '/survey/editor/updateQuestion'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyQuestion', $httpHeader, 'swagger_type'), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyQuestion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorUpdateRange
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateRangeBody $survey_editor_update_range_body  (required)
     * @return \AnketologClient\Model\SurveyRange
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateRange($survey_editor_update_range_body)
    {
        list($response) = $this->surveyEditorUpdateRangeWithHttpInfo($survey_editor_update_range_body);
        return $response;
    }

    /**
     * Operation surveyEditorUpdateRangeWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateRangeBody $survey_editor_update_range_body  (required)
     * @return Array of \AnketologClient\Model\SurveyRange, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateRangeWithHttpInfo($survey_editor_update_range_body)
    {
        // verify the required parameter 'survey_editor_update_range_body' is set
        if ($survey_editor_update_range_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_update_range_body when calling surveyEditorUpdateRange');
        }
        // parse inputs
        $resourcePath = "/survey/editor/updateRange";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_update_range_body)) {
            $_tempBody = $survey_editor_update_range_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyRange',
                '/survey/editor/updateRange'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyRange', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyRange', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorUpdateRow
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateRowBody $survey_editor_update_row_body  (required)
     * @return \AnketologClient\Model\SurveyRow
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateRow($survey_editor_update_row_body)
    {
        list($response) = $this->surveyEditorUpdateRowWithHttpInfo($survey_editor_update_row_body);
        return $response;
    }

    /**
     * Operation surveyEditorUpdateRowWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateRowBody $survey_editor_update_row_body  (required)
     * @return Array of \AnketologClient\Model\SurveyRow, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateRowWithHttpInfo($survey_editor_update_row_body)
    {
        // verify the required parameter 'survey_editor_update_row_body' is set
        if ($survey_editor_update_row_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_update_row_body when calling surveyEditorUpdateRow');
        }
        // parse inputs
        $resourcePath = "/survey/editor/updateRow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_update_row_body)) {
            $_tempBody = $survey_editor_update_row_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyRow',
                '/survey/editor/updateRow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyRow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyRow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorUpdateSettings
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateSettingsBody $survey_editor_update_settings_body  (required)
     * @return \AnketologClient\Model\SurveySettings
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateSettings($survey_editor_update_settings_body)
    {
        list($response) = $this->surveyEditorUpdateSettingsWithHttpInfo($survey_editor_update_settings_body);
        return $response;
    }

    /**
     * Operation surveyEditorUpdateSettingsWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateSettingsBody $survey_editor_update_settings_body  (required)
     * @return Array of \AnketologClient\Model\SurveySettings, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateSettingsWithHttpInfo($survey_editor_update_settings_body)
    {
        // verify the required parameter 'survey_editor_update_settings_body' is set
        if ($survey_editor_update_settings_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_update_settings_body when calling surveyEditorUpdateSettings');
        }
        // parse inputs
        $resourcePath = "/survey/editor/updateSettings";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_update_settings_body)) {
            $_tempBody = $survey_editor_update_settings_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveySettings',
                '/survey/editor/updateSettings'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveySettings', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveySettings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyEditorUpdateVisiblerule
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateVisibleruleBody $survey_editor_update_visiblerule_body  (required)
     * @return \AnketologClient\Model\SurveyVisiblerule
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateVisiblerule($survey_editor_update_visiblerule_body)
    {
        list($response) = $this->surveyEditorUpdateVisibleruleWithHttpInfo($survey_editor_update_visiblerule_body);
        return $response;
    }

    /**
     * Operation surveyEditorUpdateVisibleruleWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyEditorUpdateVisibleruleBody $survey_editor_update_visiblerule_body  (required)
     * @return Array of \AnketologClient\Model\SurveyVisiblerule, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyEditorUpdateVisibleruleWithHttpInfo($survey_editor_update_visiblerule_body)
    {
        // verify the required parameter 'survey_editor_update_visiblerule_body' is set
        if ($survey_editor_update_visiblerule_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_editor_update_visiblerule_body when calling surveyEditorUpdateVisiblerule');
        }
        // parse inputs
        $resourcePath = "/survey/editor/updateVisiblerule";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_editor_update_visiblerule_body)) {
            $_tempBody = $survey_editor_update_visiblerule_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyVisiblerule',
                '/survey/editor/updateVisiblerule'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyVisiblerule', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyVisiblerule', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
