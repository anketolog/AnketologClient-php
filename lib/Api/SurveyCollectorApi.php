<?php
/**
 * SurveyCollectorApi
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Документация к Анкетолог API (beta-версия)
 *
 * ### Библиотеки для работы с API  * **PHP** https://github.com/anketolog/AnketologClient-php  ### Библиотеки на других языках  Вы можете самостоятельно сгенерировать библиотеку, [на любом доступном языке](https://github.com/swagger-api/swagger-codegen#api-clients), воспользовавшись [генератором](http://swagger.io/swagger-codegen). Конфигурационный файл можно скачать по [этой ссылке](https://anketolog.ru/api/external/v2/anketolog.yaml).  ### Работа с API  Работа с API осуществляется при помощи отправки POST-запросов на адрес:  ``` https://apiv2.anketolog.ru/{resource} ```  Необходимые параметры передаются в теле запроса в виде JSON-строки:  ``` {     \"survey_id\": \"ID опроса\" } ```  Для авторизации необходимо передать заголовок **X-Anketolog-ApiKey** в запросе:  ``` X-Anketolog-ApiKey: API_KEY ```  Ключ доступа к API можно получить в [разделе настроек](https://anketolog.ru/user/account/apikey).   ### Пример запроса  ``` curl -X POST \\   --header 'X-Anketolog-ApiKey: API_KEY' \\   -d '{\"survey_id\": \"ID опроса\"}' \\   'https://apiv2.anketolog.ru/survey/manage/info' ```  ### Webhook  Webhook – это уведомление сторонних приложений о событиях, произошедших на сайте anketolog.ru, путем отправки уведомлений. Во время возникновения события сервер посылает POST-запрос по адресу, который указан в URL. Настроить Webhook можно в [разделе настроек](https://anketolog.loc/user/account/apikey).  ### Webhook : Ответ на анкету  ``` action=new-answer data={     \"answer\": {         \"id\": 0,         \"survey_id\": 0,         \"revision_id\": 0,         \"start_date\": 0,         \"finish_date\": 0,         \"status\": \"v\",         \"collector\": {             \"type\": \"string\",             \"name\": \"string\",             \"swagger_type\": \"string\"         }   } } date=Fri, 26 Oct 2018 05:46:30 +0300 ```
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Api;

use \AnketologClient\Configuration;
use \AnketologClient\ApiClient;
use \AnketologClient\ApiException;
use \AnketologClient\ObjectSerializer;

/**
 * SurveyCollectorApi Class Doc Comment
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SurveyCollectorApi
{

    /**
     * API Client
     *
     * @var \AnketologClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \AnketologClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\AnketologClient\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://apiv2.anketolog.ru/');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \AnketologClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \AnketologClient\ApiClient $apiClient set the API client
     *
     * @return SurveyCollectorApi
     */
    public function setApiClient(\AnketologClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation surveyCollectorCreateAlias
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorCreateAliasBody $survey_collector_create_alias_body  (required)
     * @return \AnketologClient\Model\SurveyAliasCollector
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorCreateAlias($survey_collector_create_alias_body)
    {
        list($response) = $this->surveyCollectorCreateAliasWithHttpInfo($survey_collector_create_alias_body);
        return $response;
    }

    /**
     * Operation surveyCollectorCreateAliasWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorCreateAliasBody $survey_collector_create_alias_body  (required)
     * @return Array of \AnketologClient\Model\SurveyAliasCollector, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorCreateAliasWithHttpInfo($survey_collector_create_alias_body)
    {
        // verify the required parameter 'survey_collector_create_alias_body' is set
        if ($survey_collector_create_alias_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_collector_create_alias_body when calling surveyCollectorCreateAlias');
        }
        // parse inputs
        $resourcePath = "/survey/collector/createalias";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_collector_create_alias_body)) {
            $_tempBody = $survey_collector_create_alias_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyAliasCollector',
                '/survey/collector/createalias'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyAliasCollector', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyAliasCollector', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyCollectorCreateExtralink
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorCreateExtralinkBody $survey_collector_create_extralink_body  (required)
     * @return \AnketologClient\Model\SurveyExtralinkCollector
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorCreateExtralink($survey_collector_create_extralink_body)
    {
        list($response) = $this->surveyCollectorCreateExtralinkWithHttpInfo($survey_collector_create_extralink_body);
        return $response;
    }

    /**
     * Operation surveyCollectorCreateExtralinkWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorCreateExtralinkBody $survey_collector_create_extralink_body  (required)
     * @return Array of \AnketologClient\Model\SurveyExtralinkCollector, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorCreateExtralinkWithHttpInfo($survey_collector_create_extralink_body)
    {
        // verify the required parameter 'survey_collector_create_extralink_body' is set
        if ($survey_collector_create_extralink_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_collector_create_extralink_body when calling surveyCollectorCreateExtralink');
        }
        // parse inputs
        $resourcePath = "/survey/collector/createextralink";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_collector_create_extralink_body)) {
            $_tempBody = $survey_collector_create_extralink_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyExtralinkCollector',
                '/survey/collector/createextralink'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyExtralinkCollector', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyExtralinkCollector', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyCollectorCreateWidget
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorCreateWidgetBody $survey_collector_create_widget_body  (required)
     * @return \AnketologClient\Model\SurveyWidgetCollector
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorCreateWidget($survey_collector_create_widget_body)
    {
        list($response) = $this->surveyCollectorCreateWidgetWithHttpInfo($survey_collector_create_widget_body);
        return $response;
    }

    /**
     * Operation surveyCollectorCreateWidgetWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorCreateWidgetBody $survey_collector_create_widget_body  (required)
     * @return Array of \AnketologClient\Model\SurveyWidgetCollector, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorCreateWidgetWithHttpInfo($survey_collector_create_widget_body)
    {
        // verify the required parameter 'survey_collector_create_widget_body' is set
        if ($survey_collector_create_widget_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_collector_create_widget_body when calling surveyCollectorCreateWidget');
        }
        // parse inputs
        $resourcePath = "/survey/collector/createwidget";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_collector_create_widget_body)) {
            $_tempBody = $survey_collector_create_widget_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyWidgetCollector',
                '/survey/collector/createwidget'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyWidgetCollector', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyWidgetCollector', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyCollectorList
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorListBody $survey_collector_list_body  (required)
     * @return \AnketologClient\Model\SurveyCollector[]
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorList($survey_collector_list_body)
    {
        list($response) = $this->surveyCollectorListWithHttpInfo($survey_collector_list_body);
        return $response;
    }

    /**
     * Operation surveyCollectorListWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorListBody $survey_collector_list_body  (required)
     * @return Array of \AnketologClient\Model\SurveyCollector[], HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorListWithHttpInfo($survey_collector_list_body)
    {
        // verify the required parameter 'survey_collector_list_body' is set
        if ($survey_collector_list_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_collector_list_body when calling surveyCollectorList');
        }
        // parse inputs
        $resourcePath = "/survey/collector/list";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_collector_list_body)) {
            $_tempBody = $survey_collector_list_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyCollector[]',
                '/survey/collector/list'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyCollector[]', $httpHeader, 'swagger_type'), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyCollector[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyCollectorRemoveextralink
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorRemoveextralinkBody $survey_collector_removeextralink_body  (required)
     * @return \AnketologClient\Model\InlineResponse200
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorRemoveextralink($survey_collector_removeextralink_body)
    {
        list($response) = $this->surveyCollectorRemoveextralinkWithHttpInfo($survey_collector_removeextralink_body);
        return $response;
    }

    /**
     * Operation surveyCollectorRemoveextralinkWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorRemoveextralinkBody $survey_collector_removeextralink_body  (required)
     * @return Array of \AnketologClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorRemoveextralinkWithHttpInfo($survey_collector_removeextralink_body)
    {
        // verify the required parameter 'survey_collector_removeextralink_body' is set
        if ($survey_collector_removeextralink_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_collector_removeextralink_body when calling surveyCollectorRemoveextralink');
        }
        // parse inputs
        $resourcePath = "/survey/collector/removeextralink";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_collector_removeextralink_body)) {
            $_tempBody = $survey_collector_removeextralink_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\InlineResponse200',
                '/survey/collector/removeextralink'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyCollectorUpdateAlias
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorUpdateAliasBody $survey_collector_update_alias_body  (required)
     * @return \AnketologClient\Model\SurveyAliasCollector
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorUpdateAlias($survey_collector_update_alias_body)
    {
        list($response) = $this->surveyCollectorUpdateAliasWithHttpInfo($survey_collector_update_alias_body);
        return $response;
    }

    /**
     * Operation surveyCollectorUpdateAliasWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorUpdateAliasBody $survey_collector_update_alias_body  (required)
     * @return Array of \AnketologClient\Model\SurveyAliasCollector, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorUpdateAliasWithHttpInfo($survey_collector_update_alias_body)
    {
        // verify the required parameter 'survey_collector_update_alias_body' is set
        if ($survey_collector_update_alias_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_collector_update_alias_body when calling surveyCollectorUpdateAlias');
        }
        // parse inputs
        $resourcePath = "/survey/collector/updatealias";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_collector_update_alias_body)) {
            $_tempBody = $survey_collector_update_alias_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyAliasCollector',
                '/survey/collector/updatealias'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyAliasCollector', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyAliasCollector', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyCollectorUpdateExtralink
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorUpdateExtralinkBody $survey_collector_update_extralink_body  (required)
     * @return \AnketologClient\Model\SurveyExtralinkCollector
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorUpdateExtralink($survey_collector_update_extralink_body)
    {
        list($response) = $this->surveyCollectorUpdateExtralinkWithHttpInfo($survey_collector_update_extralink_body);
        return $response;
    }

    /**
     * Operation surveyCollectorUpdateExtralinkWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorUpdateExtralinkBody $survey_collector_update_extralink_body  (required)
     * @return Array of \AnketologClient\Model\SurveyExtralinkCollector, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorUpdateExtralinkWithHttpInfo($survey_collector_update_extralink_body)
    {
        // verify the required parameter 'survey_collector_update_extralink_body' is set
        if ($survey_collector_update_extralink_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_collector_update_extralink_body when calling surveyCollectorUpdateExtralink');
        }
        // parse inputs
        $resourcePath = "/survey/collector/updateextralink";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_collector_update_extralink_body)) {
            $_tempBody = $survey_collector_update_extralink_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyExtralinkCollector',
                '/survey/collector/updateextralink'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyExtralinkCollector', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyExtralinkCollector', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation surveyCollectorUpdateWidget
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorUpdateWidgetBody $survey_collector_update_widget_body  (required)
     * @return \AnketologClient\Model\SurveyWidgetCollector
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorUpdateWidget($survey_collector_update_widget_body)
    {
        list($response) = $this->surveyCollectorUpdateWidgetWithHttpInfo($survey_collector_update_widget_body);
        return $response;
    }

    /**
     * Operation surveyCollectorUpdateWidgetWithHttpInfo
     *
     * 
     *
     * @param \AnketologClient\Model\SurveyCollectorUpdateWidgetBody $survey_collector_update_widget_body  (required)
     * @return Array of \AnketologClient\Model\SurveyWidgetCollector, HTTP status code, HTTP response headers (array of strings)
     * @throws \AnketologClient\ApiException on non-2xx response
     */
    public function surveyCollectorUpdateWidgetWithHttpInfo($survey_collector_update_widget_body)
    {
        // verify the required parameter 'survey_collector_update_widget_body' is set
        if ($survey_collector_update_widget_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $survey_collector_update_widget_body when calling surveyCollectorUpdateWidget');
        }
        // parse inputs
        $resourcePath = "/survey/collector/updatewidget";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($survey_collector_update_widget_body)) {
            $_tempBody = $survey_collector_update_widget_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('x-anketolog-apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['x-anketolog-apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\AnketologClient\Model\SurveyWidgetCollector',
                '/survey/collector/updatewidget'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\AnketologClient\Model\SurveyWidgetCollector', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\SurveyWidgetCollector', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\AnketologClient\Model\ResponseError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
