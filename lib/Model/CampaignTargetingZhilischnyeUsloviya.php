<?php
/**
 * CampaignTargetingZhilischnyeUsloviya
 *
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Anketolog API v2.0
 *
 * ### Клиенты:  * [**PHP**](https://github.com/anketolog/AnketologClient-php)  ### Клиенты на других языках:  * Скачайте конфигурационный [swagger-файл](https://anketolog.ru/api/external/v2/docs/Anketolog.yaml) * Воспользуйтесь официальным [генератором](http://swagger.io/swagger-codegen/)   ([список поддерживаемых языков](https://github.com/swagger-api/swagger-codegen#api-clients))
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Model;

use \ArrayAccess;

/**
 * CampaignTargetingZhilischnyeUsloviya Class Doc Comment
 *
 * @category    Class */
 // @description Группа &#x60;Жилищные условия&#x60; (+10 руб. к стоимости ответа)
/** 
 * @package     AnketologClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CampaignTargetingZhilischnyeUsloviya implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CampaignTargetingZhilischnyeUsloviya';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'is_enable' => 'bool',
        'usloviya_prozhivaniya' => 'string[]',
        'vladenie_nedvizhimym_imuschestvom' => 'string[]',
        'vid_nedvizhimogo_imuschestva_v_sobstvennosti' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'is_enable' => 'is_enable',
        'usloviya_prozhivaniya' => 'usloviya_prozhivaniya',
        'vladenie_nedvizhimym_imuschestvom' => 'vladenie_nedvizhimym_imuschestvom',
        'vid_nedvizhimogo_imuschestva_v_sobstvennosti' => 'vid_nedvizhimogo_imuschestva_v_sobstvennosti'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'is_enable' => 'setIsEnable',
        'usloviya_prozhivaniya' => 'setUsloviyaProzhivaniya',
        'vladenie_nedvizhimym_imuschestvom' => 'setVladenieNedvizhimymImuschestvom',
        'vid_nedvizhimogo_imuschestva_v_sobstvennosti' => 'setVidNedvizhimogoImuschestvaVSobstvennosti'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'is_enable' => 'getIsEnable',
        'usloviya_prozhivaniya' => 'getUsloviyaProzhivaniya',
        'vladenie_nedvizhimym_imuschestvom' => 'getVladenieNedvizhimymImuschestvom',
        'vid_nedvizhimogo_imuschestva_v_sobstvennosti' => 'getVidNedvizhimogoImuschestvaVSobstvennosti'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const USLOVIYA_PROZHIVANIYA__0 = 'option_0';
    const USLOVIYA_PROZHIVANIYA__1 = 'option_1';
    const USLOVIYA_PROZHIVANIYA__2 = 'option_2';
    const USLOVIYA_PROZHIVANIYA__3 = 'option_3';
    const USLOVIYA_PROZHIVANIYA__4 = 'option_4';
    const USLOVIYA_PROZHIVANIYA__5 = 'option_5';
    const USLOVIYA_PROZHIVANIYA__6 = 'option_6';
    const USLOVIYA_PROZHIVANIYA__7 = 'option_7';
    const USLOVIYA_PROZHIVANIYA__8 = 'option_8';
    const USLOVIYA_PROZHIVANIYA__9 = 'option_9';
    const USLOVIYA_PROZHIVANIYA__10 = 'option_10';
    const USLOVIYA_PROZHIVANIYA__11 = 'option_11';
    const VLADENIE_NEDVIZHIMYM_IMUSCHESTVOM__0 = 'option_0';
    const VLADENIE_NEDVIZHIMYM_IMUSCHESTVOM__1 = 'option_1';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__0 = 'option_0';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__1 = 'option_1';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__2 = 'option_2';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__3 = 'option_3';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__4 = 'option_4';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__5 = 'option_5';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__6 = 'option_6';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__7 = 'option_7';
    const VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__8 = 'option_8';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getUsloviyaProzhivaniyaAllowableValues()
    {
        return [
            self::USLOVIYA_PROZHIVANIYA__0,
            self::USLOVIYA_PROZHIVANIYA__1,
            self::USLOVIYA_PROZHIVANIYA__2,
            self::USLOVIYA_PROZHIVANIYA__3,
            self::USLOVIYA_PROZHIVANIYA__4,
            self::USLOVIYA_PROZHIVANIYA__5,
            self::USLOVIYA_PROZHIVANIYA__6,
            self::USLOVIYA_PROZHIVANIYA__7,
            self::USLOVIYA_PROZHIVANIYA__8,
            self::USLOVIYA_PROZHIVANIYA__9,
            self::USLOVIYA_PROZHIVANIYA__10,
            self::USLOVIYA_PROZHIVANIYA__11,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVladenieNedvizhimymImuschestvomAllowableValues()
    {
        return [
            self::VLADENIE_NEDVIZHIMYM_IMUSCHESTVOM__0,
            self::VLADENIE_NEDVIZHIMYM_IMUSCHESTVOM__1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVidNedvizhimogoImuschestvaVSobstvennostiAllowableValues()
    {
        return [
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__0,
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__1,
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__2,
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__3,
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__4,
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__5,
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__6,
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__7,
            self::VID_NEDVIZHIMOGO_IMUSCHESTVA_V_SOBSTVENNOSTI__8,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_enable'] = isset($data['is_enable']) ? $data['is_enable'] : null;
        $this->container['usloviya_prozhivaniya'] = isset($data['usloviya_prozhivaniya']) ? $data['usloviya_prozhivaniya'] : null;
        $this->container['vladenie_nedvizhimym_imuschestvom'] = isset($data['vladenie_nedvizhimym_imuschestvom']) ? $data['vladenie_nedvizhimym_imuschestvom'] : null;
        $this->container['vid_nedvizhimogo_imuschestva_v_sobstvennosti'] = isset($data['vid_nedvizhimogo_imuschestva_v_sobstvennosti']) ? $data['vid_nedvizhimogo_imuschestva_v_sobstvennosti'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets is_enable
     * @return bool
     */
    public function getIsEnable()
    {
        return $this->container['is_enable'];
    }

    /**
     * Sets is_enable
     * @param bool $is_enable Группа включена
     * @return $this
     */
    public function setIsEnable($is_enable)
    {
        $this->container['is_enable'] = $is_enable;

        return $this;
    }

    /**
     * Gets usloviya_prozhivaniya
     * @return string[]
     */
    public function getUsloviyaProzhivaniya()
    {
        return $this->container['usloviya_prozhivaniya'];
    }

    /**
     * Sets usloviya_prozhivaniya
     * @param string[] $usloviya_prozhivaniya Параметр `Условия проживания`  * `option_0` - снимает комнату * `option_1` - снимает квартиру * `option_2` - снимает дом * `option_3` - живет у родственников/друзей * `option_4` - проживает по договору безвозмездного пользования/социального найма * `option_5` - живет в общежитии/коммуналке * `option_6` - живет в собственном доме * `option_7` - живет в собственной 1ком. квартире * `option_8` - живет в собственной 2ком. квартире * `option_9` - живет в собственной 3ком. квартире * `option_10` - живет в собственной 4ком. и более квартире * `option_11` - живет в собственном коттедже, таунхаусе
     * @return $this
     */
    public function setUsloviyaProzhivaniya($usloviya_prozhivaniya)
    {
        $allowed_values = array('option_0', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6', 'option_7', 'option_8', 'option_9', 'option_10', 'option_11');
        if (!in_array($usloviya_prozhivaniya, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'usloviya_prozhivaniya', must be one of 'option_0', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6', 'option_7', 'option_8', 'option_9', 'option_10', 'option_11'");
        }
        $this->container['usloviya_prozhivaniya'] = $usloviya_prozhivaniya;

        return $this;
    }

    /**
     * Gets vladenie_nedvizhimym_imuschestvom
     * @return string[]
     */
    public function getVladenieNedvizhimymImuschestvom()
    {
        return $this->container['vladenie_nedvizhimym_imuschestvom'];
    }

    /**
     * Sets vladenie_nedvizhimym_imuschestvom
     * @param string[] $vladenie_nedvizhimym_imuschestvom Параметр `Владение недвижимым имуществом`  * `option_0` - есть * `option_1` - нет
     * @return $this
     */
    public function setVladenieNedvizhimymImuschestvom($vladenie_nedvizhimym_imuschestvom)
    {
        $allowed_values = array('option_0', 'option_1');
        if (!in_array($vladenie_nedvizhimym_imuschestvom, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'vladenie_nedvizhimym_imuschestvom', must be one of 'option_0', 'option_1'");
        }
        $this->container['vladenie_nedvizhimym_imuschestvom'] = $vladenie_nedvizhimym_imuschestvom;

        return $this;
    }

    /**
     * Gets vid_nedvizhimogo_imuschestva_v_sobstvennosti
     * @return string[]
     */
    public function getVidNedvizhimogoImuschestvaVSobstvennosti()
    {
        return $this->container['vid_nedvizhimogo_imuschestva_v_sobstvennosti'];
    }

    /**
     * Sets vid_nedvizhimogo_imuschestva_v_sobstvennosti
     * @param string[] $vid_nedvizhimogo_imuschestva_v_sobstvennosti Параметр `Вид недвижимого имущества в собственности`  * `option_0` - частный дом в черте города * `option_1` - частный дом/дача за городом * `option_2` - частный дом/дача в курортной зоне * `option_3` - коттедж/таунхаус * `option_4` - комната в общежитии/коммуналке/квартире * `option_5` - 1ком. квартира * `option_6` - 2ком. квартира * `option_7` - 3ком. квартира * `option_8` - 4 ком. и более квартира
     * @return $this
     */
    public function setVidNedvizhimogoImuschestvaVSobstvennosti($vid_nedvizhimogo_imuschestva_v_sobstvennosti)
    {
        $allowed_values = array('option_0', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6', 'option_7', 'option_8');
        if (!in_array($vid_nedvizhimogo_imuschestva_v_sobstvennosti, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'vid_nedvizhimogo_imuschestva_v_sobstvennosti', must be one of 'option_0', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6', 'option_7', 'option_8'");
        }
        $this->container['vid_nedvizhimogo_imuschestva_v_sobstvennosti'] = $vid_nedvizhimogo_imuschestva_v_sobstvennosti;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


