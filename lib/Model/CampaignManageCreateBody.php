<?php
/**
 * CampaignManageCreateBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Анкетолог API v2.0
 *
 * ### Клиенты:  * [**PHP**](https://github.com/anketolog/AnketologClient-php)  ### Клиенты на других языках:  * Скачайте конфигурационный [swagger-файл](https://anketolog.ru/api/external/v2/docs/anketolog.yaml) * Воспользуйтесь официальным [генератором](http://swagger.io/swagger-codegen/)   ([список поддерживаемых языков](https://github.com/swagger-api/swagger-codegen#api-clients))  ### Ключ для доступа к API  Ключ для доступа к API можно получить в [разделе настроек](https://anketolog.ru/user/account/api)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Model;

use \ArrayAccess;

/**
 * CampaignManageCreateBody Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     AnketologClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CampaignManageCreateBody implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CampaignManageCreateBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'survey_id' => 'int',
        'name' => 'string',
        'targeting' => '\AnketologClient\Model\CampaignTargeting',
        'unique_respondents' => 'bool',
        'answer_count' => 'int',
        'answer_price' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'survey_id' => 'survey_id',
        'name' => 'name',
        'targeting' => 'targeting',
        'unique_respondents' => 'unique_respondents',
        'answer_count' => 'answer_count',
        'answer_price' => 'answer_price'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'survey_id' => 'setSurveyId',
        'name' => 'setName',
        'targeting' => 'setTargeting',
        'unique_respondents' => 'setUniqueRespondents',
        'answer_count' => 'setAnswerCount',
        'answer_price' => 'setAnswerPrice'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'survey_id' => 'getSurveyId',
        'name' => 'getName',
        'targeting' => 'getTargeting',
        'unique_respondents' => 'getUniqueRespondents',
        'answer_count' => 'getAnswerCount',
        'answer_price' => 'getAnswerPrice'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['survey_id'] = isset($data['survey_id']) ? $data['survey_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['targeting'] = isset($data['targeting']) ? $data['targeting'] : null;
        $this->container['unique_respondents'] = isset($data['unique_respondents']) ? $data['unique_respondents'] : null;
        $this->container['answer_count'] = isset($data['answer_count']) ? $data['answer_count'] : null;
        $this->container['answer_price'] = isset($data['answer_price']) ? $data['answer_price'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['survey_id'] === null) {
            $invalid_properties[] = "'survey_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['targeting'] === null) {
            $invalid_properties[] = "'targeting' can't be null";
        }
        if ($this->container['unique_respondents'] === null) {
            $invalid_properties[] = "'unique_respondents' can't be null";
        }
        if ($this->container['answer_count'] === null) {
            $invalid_properties[] = "'answer_count' can't be null";
        }
        if ($this->container['answer_price'] === null) {
            $invalid_properties[] = "'answer_price' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['survey_id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['targeting'] === null) {
            return false;
        }
        if ($this->container['unique_respondents'] === null) {
            return false;
        }
        if ($this->container['answer_count'] === null) {
            return false;
        }
        if ($this->container['answer_price'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets survey_id
     * @return int
     */
    public function getSurveyId()
    {
        return $this->container['survey_id'];
    }

    /**
     * Sets survey_id
     * @param int $survey_id ID опроса
     * @return $this
     */
    public function setSurveyId($survey_id)
    {
        $this->container['survey_id'] = $survey_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Название кампании
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets targeting
     * @return \AnketologClient\Model\CampaignTargeting
     */
    public function getTargeting()
    {
        return $this->container['targeting'];
    }

    /**
     * Sets targeting
     * @param \AnketologClient\Model\CampaignTargeting $targeting
     * @return $this
     */
    public function setTargeting($targeting)
    {
        $this->container['targeting'] = $targeting;

        return $this;
    }

    /**
     * Gets unique_respondents
     * @return bool
     */
    public function getUniqueRespondents()
    {
        return $this->container['unique_respondents'];
    }

    /**
     * Sets unique_respondents
     * @param bool $unique_respondents Исключить повторные ответы
     * @return $this
     */
    public function setUniqueRespondents($unique_respondents)
    {
        $this->container['unique_respondents'] = $unique_respondents;

        return $this;
    }

    /**
     * Gets answer_count
     * @return int
     */
    public function getAnswerCount()
    {
        return $this->container['answer_count'];
    }

    /**
     * Sets answer_count
     * @param int $answer_count Количество ответов
     * @return $this
     */
    public function setAnswerCount($answer_count)
    {
        $this->container['answer_count'] = $answer_count;

        return $this;
    }

    /**
     * Gets answer_price
     * @return int
     */
    public function getAnswerPrice()
    {
        return $this->container['answer_price'];
    }

    /**
     * Sets answer_price
     * @param int $answer_price Стоимсоть ответа
     * @return $this
     */
    public function setAnswerPrice($answer_price)
    {
        $this->container['answer_price'] = $answer_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


