<?php
/**
 * CampaignTargetingPoliticheskayaPrinadlezhnost
 *
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Анкетолог API v2.0
 *
 * ### Клиенты:  * [**PHP**](https://github.com/anketolog/AnketologClient-php)  ### Клиенты на других языках:  * Скачайте конфигурационный [swagger-файл](https://anketolog.ru/api/external/v2/docs/anketolog.yaml) * Воспользуйтесь официальным [генератором](http://swagger.io/swagger-codegen/)   ([список поддерживаемых языков](https://github.com/swagger-api/swagger-codegen#api-clients))  ### Ключ для доступа к API  Ключ для доступа к API можно получить в [разделе настроек](https://anketolog.ru/user/account/api)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Model;

use \ArrayAccess;

/**
 * CampaignTargetingPoliticheskayaPrinadlezhnost Class Doc Comment
 *
 * @category    Class */
 // @description Группа &#x60;Политическая принадлежность&#x60; (+10 руб. к стоимости ответа)
/** 
 * @package     AnketologClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CampaignTargetingPoliticheskayaPrinadlezhnost implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CampaignTargetingPoliticheskayaPrinadlezhnost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'is_enable' => 'bool',
        'politicheskaya_aktivnost' => 'string[]',
        'politicheskaya_prinadlezhnost' => 'string[]',
        'chastota_posescheniya_vyborov' => 'string[]',
        'sostoit_v_partii' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'is_enable' => 'is_enable',
        'politicheskaya_aktivnost' => 'politicheskaya_aktivnost',
        'politicheskaya_prinadlezhnost' => 'politicheskaya_prinadlezhnost',
        'chastota_posescheniya_vyborov' => 'chastota_posescheniya_vyborov',
        'sostoit_v_partii' => 'sostoit_v_partii'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'is_enable' => 'setIsEnable',
        'politicheskaya_aktivnost' => 'setPoliticheskayaAktivnost',
        'politicheskaya_prinadlezhnost' => 'setPoliticheskayaPrinadlezhnost',
        'chastota_posescheniya_vyborov' => 'setChastotaPosescheniyaVyborov',
        'sostoit_v_partii' => 'setSostoitVPartii'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'is_enable' => 'getIsEnable',
        'politicheskaya_aktivnost' => 'getPoliticheskayaAktivnost',
        'politicheskaya_prinadlezhnost' => 'getPoliticheskayaPrinadlezhnost',
        'chastota_posescheniya_vyborov' => 'getChastotaPosescheniyaVyborov',
        'sostoit_v_partii' => 'getSostoitVPartii'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const POLITICHESKAYA_AKTIVNOST__0 = 'option_0';
    const POLITICHESKAYA_AKTIVNOST__1 = 'option_1';
    const POLITICHESKAYA_PRINADLEZHNOST__0 = 'option_0';
    const POLITICHESKAYA_PRINADLEZHNOST__1 = 'option_1';
    const POLITICHESKAYA_PRINADLEZHNOST__2 = 'option_2';
    const POLITICHESKAYA_PRINADLEZHNOST__3 = 'option_3';
    const POLITICHESKAYA_PRINADLEZHNOST__4 = 'option_4';
    const POLITICHESKAYA_PRINADLEZHNOST__5 = 'option_5';
    const POLITICHESKAYA_PRINADLEZHNOST__6 = 'option_6';
    const CHASTOTA_POSESCHENIYA_VYBOROV__0 = 'option_0';
    const CHASTOTA_POSESCHENIYA_VYBOROV__1 = 'option_1';
    const CHASTOTA_POSESCHENIYA_VYBOROV__2 = 'option_2';
    const CHASTOTA_POSESCHENIYA_VYBOROV__3 = 'option_3';
    const CHASTOTA_POSESCHENIYA_VYBOROV__4 = 'option_4';
    const SOSTOIT_V_PARTII__0 = 'option_0';
    const SOSTOIT_V_PARTII__1 = 'option_1';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPoliticheskayaAktivnostAllowableValues()
    {
        return [
            self::POLITICHESKAYA_AKTIVNOST__0,
            self::POLITICHESKAYA_AKTIVNOST__1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPoliticheskayaPrinadlezhnostAllowableValues()
    {
        return [
            self::POLITICHESKAYA_PRINADLEZHNOST__0,
            self::POLITICHESKAYA_PRINADLEZHNOST__1,
            self::POLITICHESKAYA_PRINADLEZHNOST__2,
            self::POLITICHESKAYA_PRINADLEZHNOST__3,
            self::POLITICHESKAYA_PRINADLEZHNOST__4,
            self::POLITICHESKAYA_PRINADLEZHNOST__5,
            self::POLITICHESKAYA_PRINADLEZHNOST__6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getChastotaPosescheniyaVyborovAllowableValues()
    {
        return [
            self::CHASTOTA_POSESCHENIYA_VYBOROV__0,
            self::CHASTOTA_POSESCHENIYA_VYBOROV__1,
            self::CHASTOTA_POSESCHENIYA_VYBOROV__2,
            self::CHASTOTA_POSESCHENIYA_VYBOROV__3,
            self::CHASTOTA_POSESCHENIYA_VYBOROV__4,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSostoitVPartiiAllowableValues()
    {
        return [
            self::SOSTOIT_V_PARTII__0,
            self::SOSTOIT_V_PARTII__1,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_enable'] = isset($data['is_enable']) ? $data['is_enable'] : null;
        $this->container['politicheskaya_aktivnost'] = isset($data['politicheskaya_aktivnost']) ? $data['politicheskaya_aktivnost'] : null;
        $this->container['politicheskaya_prinadlezhnost'] = isset($data['politicheskaya_prinadlezhnost']) ? $data['politicheskaya_prinadlezhnost'] : null;
        $this->container['chastota_posescheniya_vyborov'] = isset($data['chastota_posescheniya_vyborov']) ? $data['chastota_posescheniya_vyborov'] : null;
        $this->container['sostoit_v_partii'] = isset($data['sostoit_v_partii']) ? $data['sostoit_v_partii'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets is_enable
     * @return bool
     */
    public function getIsEnable()
    {
        return $this->container['is_enable'];
    }

    /**
     * Sets is_enable
     * @param bool $is_enable Группа включена
     * @return $this
     */
    public function setIsEnable($is_enable)
    {
        $this->container['is_enable'] = $is_enable;

        return $this;
    }

    /**
     * Gets politicheskaya_aktivnost
     * @return string[]
     */
    public function getPoliticheskayaAktivnost()
    {
        return $this->container['politicheskaya_aktivnost'];
    }

    /**
     * Sets politicheskaya_aktivnost
     * @param string[] $politicheskaya_aktivnost Параметр `Политическая активность`  * `option_0` - активен * `option_1` - не активен
     * @return $this
     */
    public function setPoliticheskayaAktivnost($politicheskaya_aktivnost)
    {
        $allowed_values = array('option_0', 'option_1');
        if (!in_array($politicheskaya_aktivnost, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'politicheskaya_aktivnost', must be one of 'option_0', 'option_1'");
        }
        $this->container['politicheskaya_aktivnost'] = $politicheskaya_aktivnost;

        return $this;
    }

    /**
     * Gets politicheskaya_prinadlezhnost
     * @return string[]
     */
    public function getPoliticheskayaPrinadlezhnost()
    {
        return $this->container['politicheskaya_prinadlezhnost'];
    }

    /**
     * Sets politicheskaya_prinadlezhnost
     * @param string[] $politicheskaya_prinadlezhnost Параметр `Политическая принадлежность (взгляды)`  * `option_0` - анархист * `option_1` - демократ * `option_2` - коммунист * `option_3` - консерватор * `option_4` - либерал * `option_5` - националист * `option_6` - социалист
     * @return $this
     */
    public function setPoliticheskayaPrinadlezhnost($politicheskaya_prinadlezhnost)
    {
        $allowed_values = array('option_0', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6');
        if (!in_array($politicheskaya_prinadlezhnost, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'politicheskaya_prinadlezhnost', must be one of 'option_0', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6'");
        }
        $this->container['politicheskaya_prinadlezhnost'] = $politicheskaya_prinadlezhnost;

        return $this;
    }

    /**
     * Gets chastota_posescheniya_vyborov
     * @return string[]
     */
    public function getChastotaPosescheniyaVyborov()
    {
        return $this->container['chastota_posescheniya_vyborov'];
    }

    /**
     * Sets chastota_posescheniya_vyborov
     * @param string[] $chastota_posescheniya_vyborov Параметр `Членство в политической партии`  * `option_0` - ходит на каждые выборы * `option_1` - ходит только на те выборы, которые считает значимыми * `option_2` - ходит на выборы по возможности * `option_3` - был(а) на выборах 1 раз * `option_4` - не ходит на выборы
     * @return $this
     */
    public function setChastotaPosescheniyaVyborov($chastota_posescheniya_vyborov)
    {
        $allowed_values = array('option_0', 'option_1', 'option_2', 'option_3', 'option_4');
        if (!in_array($chastota_posescheniya_vyborov, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'chastota_posescheniya_vyborov', must be one of 'option_0', 'option_1', 'option_2', 'option_3', 'option_4'");
        }
        $this->container['chastota_posescheniya_vyborov'] = $chastota_posescheniya_vyborov;

        return $this;
    }

    /**
     * Gets sostoit_v_partii
     * @return string[]
     */
    public function getSostoitVPartii()
    {
        return $this->container['sostoit_v_partii'];
    }

    /**
     * Sets sostoit_v_partii
     * @param string[] $sostoit_v_partii Параметр `Частота посещения выборов`  * `option_0` - Да * `option_1` - Нет
     * @return $this
     */
    public function setSostoitVPartii($sostoit_v_partii)
    {
        $allowed_values = array('option_0', 'option_1');
        if (!in_array($sostoit_v_partii, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'sostoit_v_partii', must be one of 'option_0', 'option_1'");
        }
        $this->container['sostoit_v_partii'] = $sostoit_v_partii;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


