<?php
/**
 * SurveyeditorupdateSettingsConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Документация к Анкетолог API (beta-версия)
 *
 * ### Библиотеки для работы с API  * **PHP** https://github.com/anketolog/AnketologClient-php  ### Библиотеки на других языках  Вы можете самостоятельно сгенерировать библиотеку, [на любом доступном языке](https://github.com/swagger-api/swagger-codegen#api-clients), воспользовавшись [генератором](http://swagger.io/swagger-codegen). Конфигурационный файл можно скачать по [этой ссылке](https://anketolog.ru/api/external/v2/anketolog.yaml).  ### Работа с API  Работа с API осуществляется при помощи отправки POST-запросов на адрес:  ``` https://apiv2.anketolog.ru/{resource} ```  Необходимые параметры передаются в теле запроса в виде JSON-строки:  ``` {     \"survey_id\": \"ID опроса\" } ```  Для авторизации необходимо передать заголовок **X-Anketolog-ApiKey** в запросе:  ``` X-Anketolog-ApiKey: API_KEY ```  Ключ доступа к API можно получить в [разделе настроек](https://anketolog.ru/user/account/apikey).   ### Пример запроса  ``` curl -X POST \\   --header 'X-Anketolog-ApiKey: API_KEY' \\   -d '{\"survey_id\": \"ID опроса\"}' \\   'https://apiv2.anketolog.ru/survey/manage/info' ```  ### Webhook  Webhook – это уведомление сторонних приложений о событиях, произошедших на сайте anketolog.ru, путем отправки уведомлений. Во время возникновения события сервер посылает POST-запрос по адресу, который указан в URL. Настроить Webhook можно в [разделе настроек](https://anketolog.loc/user/account/apikey).  ### Webhook : Ответ на анкету  ``` action=new-answer data={     \"answer\": {         \"id\": 0,         \"survey_id\": 0,         \"revision_id\": 0,         \"start_date\": 0,         \"finish_date\": 0,         \"status\": \"v\",         \"collector\": {             \"type\": \"string\",             \"name\": \"string\",             \"swagger_type\": \"string\"         }   } } date=Fri, 26 Oct 2018 05:46:30 +0300 ```
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Model;

use \ArrayAccess;

/**
 * SurveyeditorupdateSettingsConfig Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     AnketologClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SurveyeditorupdateSettingsConfig implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'surveyeditorupdateSettings_config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'name' => 'string',
        'public_result' => 'bool',
        'multiple_answers' => 'bool',
        'archive_on_date' => 'bool',
        'archive_on_answer_count' => 'bool',
        'archive_description' => 'bool',
        'archive_date' => 'int',
        'archive_answer_count' => 'int',
        'logo_id' => 'int',
        'language' => 'string',
        'theme' => 'string',
        'show_startpage' => 'bool',
        'show_finishpage' => 'bool',
        'startpage_text' => 'string',
        'finishpage_text' => 'string',
        'disqualification_text' => 'string',
        'show_captcha' => 'bool',
        'show_social' => 'bool',
        'show_question_count' => 'bool',
        'show_survey_name' => 'bool',
        'show_previous_btn' => 'bool',
        'finish_type' => 'string',
        'finish_redirect_url' => 'string',
        'finish_redirect_timeout' => 'int',
        'finish_custom_surveys' => 'string[]',
        'disable_ad' => 'bool',
        'custom_css' => 'string',
        'credentials_enable' => 'bool',
        'credentials' => '\AnketologClient\Model\SurveyeditorupdateSettingsConfigCredentials[]',
        'redirect_finish' => 'bool',
        'redirect_finish_url' => 'string',
        'redirect_finish_timeout' => 'int',
        'redirect_disqualification' => 'bool',
        'redirect_disqualification_url' => 'string',
        'redirect_disqualification_timeout' => 'int',
        'redirect_disqualification_quote' => 'bool',
        'redirect_disqualification_quote_url' => 'string',
        'redirect_disqualification_quote_timeout' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'name' => 'name',
        'public_result' => 'public_result',
        'multiple_answers' => 'multiple_answers',
        'archive_on_date' => 'archive_on_date',
        'archive_on_answer_count' => 'archive_on_answer_count',
        'archive_description' => 'archive_description',
        'archive_date' => 'archive_date',
        'archive_answer_count' => 'archive_answer_count',
        'logo_id' => 'logo_id',
        'language' => 'language',
        'theme' => 'theme',
        'show_startpage' => 'show_startpage',
        'show_finishpage' => 'show_finishpage',
        'startpage_text' => 'startpage_text',
        'finishpage_text' => 'finishpage_text',
        'disqualification_text' => 'disqualification_text',
        'show_captcha' => 'show_captcha',
        'show_social' => 'show_social',
        'show_question_count' => 'show_question_count',
        'show_survey_name' => 'show_survey_name',
        'show_previous_btn' => 'show_previous_btn',
        'finish_type' => 'finish_type',
        'finish_redirect_url' => 'finish_redirect_url',
        'finish_redirect_timeout' => 'finish_redirect_timeout',
        'finish_custom_surveys' => 'finish_custom_surveys',
        'disable_ad' => 'disable_ad',
        'custom_css' => 'custom_css',
        'credentials_enable' => 'credentials_enable',
        'credentials' => 'credentials',
        'redirect_finish' => 'redirect_finish',
        'redirect_finish_url' => 'redirect_finish_url',
        'redirect_finish_timeout' => 'redirect_finish_timeout',
        'redirect_disqualification' => 'redirect_disqualification',
        'redirect_disqualification_url' => 'redirect_disqualification_url',
        'redirect_disqualification_timeout' => 'redirect_disqualification_timeout',
        'redirect_disqualification_quote' => 'redirect_disqualification_quote',
        'redirect_disqualification_quote_url' => 'redirect_disqualification_quote_url',
        'redirect_disqualification_quote_timeout' => 'redirect_disqualification_quote_timeout'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'name' => 'setName',
        'public_result' => 'setPublicResult',
        'multiple_answers' => 'setMultipleAnswers',
        'archive_on_date' => 'setArchiveOnDate',
        'archive_on_answer_count' => 'setArchiveOnAnswerCount',
        'archive_description' => 'setArchiveDescription',
        'archive_date' => 'setArchiveDate',
        'archive_answer_count' => 'setArchiveAnswerCount',
        'logo_id' => 'setLogoId',
        'language' => 'setLanguage',
        'theme' => 'setTheme',
        'show_startpage' => 'setShowStartpage',
        'show_finishpage' => 'setShowFinishpage',
        'startpage_text' => 'setStartpageText',
        'finishpage_text' => 'setFinishpageText',
        'disqualification_text' => 'setDisqualificationText',
        'show_captcha' => 'setShowCaptcha',
        'show_social' => 'setShowSocial',
        'show_question_count' => 'setShowQuestionCount',
        'show_survey_name' => 'setShowSurveyName',
        'show_previous_btn' => 'setShowPreviousBtn',
        'finish_type' => 'setFinishType',
        'finish_redirect_url' => 'setFinishRedirectUrl',
        'finish_redirect_timeout' => 'setFinishRedirectTimeout',
        'finish_custom_surveys' => 'setFinishCustomSurveys',
        'disable_ad' => 'setDisableAd',
        'custom_css' => 'setCustomCss',
        'credentials_enable' => 'setCredentialsEnable',
        'credentials' => 'setCredentials',
        'redirect_finish' => 'setRedirectFinish',
        'redirect_finish_url' => 'setRedirectFinishUrl',
        'redirect_finish_timeout' => 'setRedirectFinishTimeout',
        'redirect_disqualification' => 'setRedirectDisqualification',
        'redirect_disqualification_url' => 'setRedirectDisqualificationUrl',
        'redirect_disqualification_timeout' => 'setRedirectDisqualificationTimeout',
        'redirect_disqualification_quote' => 'setRedirectDisqualificationQuote',
        'redirect_disqualification_quote_url' => 'setRedirectDisqualificationQuoteUrl',
        'redirect_disqualification_quote_timeout' => 'setRedirectDisqualificationQuoteTimeout'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'name' => 'getName',
        'public_result' => 'getPublicResult',
        'multiple_answers' => 'getMultipleAnswers',
        'archive_on_date' => 'getArchiveOnDate',
        'archive_on_answer_count' => 'getArchiveOnAnswerCount',
        'archive_description' => 'getArchiveDescription',
        'archive_date' => 'getArchiveDate',
        'archive_answer_count' => 'getArchiveAnswerCount',
        'logo_id' => 'getLogoId',
        'language' => 'getLanguage',
        'theme' => 'getTheme',
        'show_startpage' => 'getShowStartpage',
        'show_finishpage' => 'getShowFinishpage',
        'startpage_text' => 'getStartpageText',
        'finishpage_text' => 'getFinishpageText',
        'disqualification_text' => 'getDisqualificationText',
        'show_captcha' => 'getShowCaptcha',
        'show_social' => 'getShowSocial',
        'show_question_count' => 'getShowQuestionCount',
        'show_survey_name' => 'getShowSurveyName',
        'show_previous_btn' => 'getShowPreviousBtn',
        'finish_type' => 'getFinishType',
        'finish_redirect_url' => 'getFinishRedirectUrl',
        'finish_redirect_timeout' => 'getFinishRedirectTimeout',
        'finish_custom_surveys' => 'getFinishCustomSurveys',
        'disable_ad' => 'getDisableAd',
        'custom_css' => 'getCustomCss',
        'credentials_enable' => 'getCredentialsEnable',
        'credentials' => 'getCredentials',
        'redirect_finish' => 'getRedirectFinish',
        'redirect_finish_url' => 'getRedirectFinishUrl',
        'redirect_finish_timeout' => 'getRedirectFinishTimeout',
        'redirect_disqualification' => 'getRedirectDisqualification',
        'redirect_disqualification_url' => 'getRedirectDisqualificationUrl',
        'redirect_disqualification_timeout' => 'getRedirectDisqualificationTimeout',
        'redirect_disqualification_quote' => 'getRedirectDisqualificationQuote',
        'redirect_disqualification_quote_url' => 'getRedirectDisqualificationQuoteUrl',
        'redirect_disqualification_quote_timeout' => 'getRedirectDisqualificationQuoteTimeout'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const LANGUAGE_RU = 'ru';
    const LANGUAGE_EN = 'en';
    const THEME_DEFAULT = 'default';
    const THEME_BLUE_GREEN = 'blue-green';
    const THEME_BROWN = 'brown';
    const THEME_CRIMSON = 'crimson';
    const THEME_GRAY = 'gray';
    const THEME_GREEN = 'green';
    const THEME_PURPLE = 'purple';
    const THEME_VINOUS = 'vinous';
    const FINISH_TYPE_OUR_SURVEY = 'our-survey';
    const FINISH_TYPE_CUSTOM_SURVEY = 'custom-survey';
    const FINISH_TYPE_REDIRECT = 'redirect';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLanguageAllowableValues()
    {
        return [
            self::LANGUAGE_RU,
            self::LANGUAGE_EN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getThemeAllowableValues()
    {
        return [
            self::THEME_DEFAULT,
            self::THEME_BLUE_GREEN,
            self::THEME_BROWN,
            self::THEME_CRIMSON,
            self::THEME_GRAY,
            self::THEME_GREEN,
            self::THEME_PURPLE,
            self::THEME_VINOUS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getFinishTypeAllowableValues()
    {
        return [
            self::FINISH_TYPE_OUR_SURVEY,
            self::FINISH_TYPE_CUSTOM_SURVEY,
            self::FINISH_TYPE_REDIRECT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['public_result'] = isset($data['public_result']) ? $data['public_result'] : null;
        $this->container['multiple_answers'] = isset($data['multiple_answers']) ? $data['multiple_answers'] : null;
        $this->container['archive_on_date'] = isset($data['archive_on_date']) ? $data['archive_on_date'] : null;
        $this->container['archive_on_answer_count'] = isset($data['archive_on_answer_count']) ? $data['archive_on_answer_count'] : null;
        $this->container['archive_description'] = isset($data['archive_description']) ? $data['archive_description'] : null;
        $this->container['archive_date'] = isset($data['archive_date']) ? $data['archive_date'] : null;
        $this->container['archive_answer_count'] = isset($data['archive_answer_count']) ? $data['archive_answer_count'] : null;
        $this->container['logo_id'] = isset($data['logo_id']) ? $data['logo_id'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['theme'] = isset($data['theme']) ? $data['theme'] : null;
        $this->container['show_startpage'] = isset($data['show_startpage']) ? $data['show_startpage'] : null;
        $this->container['show_finishpage'] = isset($data['show_finishpage']) ? $data['show_finishpage'] : null;
        $this->container['startpage_text'] = isset($data['startpage_text']) ? $data['startpage_text'] : null;
        $this->container['finishpage_text'] = isset($data['finishpage_text']) ? $data['finishpage_text'] : null;
        $this->container['disqualification_text'] = isset($data['disqualification_text']) ? $data['disqualification_text'] : null;
        $this->container['show_captcha'] = isset($data['show_captcha']) ? $data['show_captcha'] : null;
        $this->container['show_social'] = isset($data['show_social']) ? $data['show_social'] : null;
        $this->container['show_question_count'] = isset($data['show_question_count']) ? $data['show_question_count'] : null;
        $this->container['show_survey_name'] = isset($data['show_survey_name']) ? $data['show_survey_name'] : null;
        $this->container['show_previous_btn'] = isset($data['show_previous_btn']) ? $data['show_previous_btn'] : null;
        $this->container['finish_type'] = isset($data['finish_type']) ? $data['finish_type'] : null;
        $this->container['finish_redirect_url'] = isset($data['finish_redirect_url']) ? $data['finish_redirect_url'] : null;
        $this->container['finish_redirect_timeout'] = isset($data['finish_redirect_timeout']) ? $data['finish_redirect_timeout'] : null;
        $this->container['finish_custom_surveys'] = isset($data['finish_custom_surveys']) ? $data['finish_custom_surveys'] : null;
        $this->container['disable_ad'] = isset($data['disable_ad']) ? $data['disable_ad'] : null;
        $this->container['custom_css'] = isset($data['custom_css']) ? $data['custom_css'] : null;
        $this->container['credentials_enable'] = isset($data['credentials_enable']) ? $data['credentials_enable'] : null;
        $this->container['credentials'] = isset($data['credentials']) ? $data['credentials'] : null;
        $this->container['redirect_finish'] = isset($data['redirect_finish']) ? $data['redirect_finish'] : null;
        $this->container['redirect_finish_url'] = isset($data['redirect_finish_url']) ? $data['redirect_finish_url'] : null;
        $this->container['redirect_finish_timeout'] = isset($data['redirect_finish_timeout']) ? $data['redirect_finish_timeout'] : null;
        $this->container['redirect_disqualification'] = isset($data['redirect_disqualification']) ? $data['redirect_disqualification'] : null;
        $this->container['redirect_disqualification_url'] = isset($data['redirect_disqualification_url']) ? $data['redirect_disqualification_url'] : null;
        $this->container['redirect_disqualification_timeout'] = isset($data['redirect_disqualification_timeout']) ? $data['redirect_disqualification_timeout'] : null;
        $this->container['redirect_disqualification_quote'] = isset($data['redirect_disqualification_quote']) ? $data['redirect_disqualification_quote'] : null;
        $this->container['redirect_disqualification_quote_url'] = isset($data['redirect_disqualification_quote_url']) ? $data['redirect_disqualification_quote_url'] : null;
        $this->container['redirect_disqualification_quote_timeout'] = isset($data['redirect_disqualification_quote_timeout']) ? $data['redirect_disqualification_quote_timeout'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("ru", "en");
        if (!in_array($this->container['language'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'language', must be one of #{allowed_values}.";
        }

        $allowed_values = array("default", "blue-green", "brown", "crimson", "gray", "green", "purple", "vinous");
        if (!in_array($this->container['theme'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'theme', must be one of #{allowed_values}.";
        }

        $allowed_values = array("our-survey", "custom-survey", "redirect");
        if (!in_array($this->container['finish_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'finish_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("ru", "en");
        if (!in_array($this->container['language'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("default", "blue-green", "brown", "crimson", "gray", "green", "purple", "vinous");
        if (!in_array($this->container['theme'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("our-survey", "custom-survey", "redirect");
        if (!in_array($this->container['finish_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Название опроса
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets public_result
     * @return bool
     */
    public function getPublicResult()
    {
        return $this->container['public_result'];
    }

    /**
     * Sets public_result
     * @param bool $public_result Публичные результаты опроса
     * @return $this
     */
    public function setPublicResult($public_result)
    {
        $this->container['public_result'] = $public_result;

        return $this;
    }

    /**
     * Gets multiple_answers
     * @return bool
     */
    public function getMultipleAnswers()
    {
        return $this->container['multiple_answers'];
    }

    /**
     * Sets multiple_answers
     * @param bool $multiple_answers Респондент может несколько раз заполнять опрос с одного IP
     * @return $this
     */
    public function setMultipleAnswers($multiple_answers)
    {
        $this->container['multiple_answers'] = $multiple_answers;

        return $this;
    }

    /**
     * Gets archive_on_date
     * @return bool
     */
    public function getArchiveOnDate()
    {
        return $this->container['archive_on_date'];
    }

    /**
     * Sets archive_on_date
     * @param bool $archive_on_date Архивировать анкету по дате
     * @return $this
     */
    public function setArchiveOnDate($archive_on_date)
    {
        $this->container['archive_on_date'] = $archive_on_date;

        return $this;
    }

    /**
     * Gets archive_on_answer_count
     * @return bool
     */
    public function getArchiveOnAnswerCount()
    {
        return $this->container['archive_on_answer_count'];
    }

    /**
     * Sets archive_on_answer_count
     * @param bool $archive_on_answer_count Архивировать анкету по кол-ву ответов
     * @return $this
     */
    public function setArchiveOnAnswerCount($archive_on_answer_count)
    {
        $this->container['archive_on_answer_count'] = $archive_on_answer_count;

        return $this;
    }

    /**
     * Gets archive_description
     * @return bool
     */
    public function getArchiveDescription()
    {
        return $this->container['archive_description'];
    }

    /**
     * Sets archive_description
     * @param bool $archive_description Причина архивирования
     * @return $this
     */
    public function setArchiveDescription($archive_description)
    {
        $this->container['archive_description'] = $archive_description;

        return $this;
    }

    /**
     * Gets archive_date
     * @return int
     */
    public function getArchiveDate()
    {
        return $this->container['archive_date'];
    }

    /**
     * Sets archive_date
     * @param int $archive_date Дата архивации анкеты в формате timestamp
     * @return $this
     */
    public function setArchiveDate($archive_date)
    {
        $this->container['archive_date'] = $archive_date;

        return $this;
    }

    /**
     * Gets archive_answer_count
     * @return int
     */
    public function getArchiveAnswerCount()
    {
        return $this->container['archive_answer_count'];
    }

    /**
     * Sets archive_answer_count
     * @param int $archive_answer_count Кол-во ответов для архивации анкеты
     * @return $this
     */
    public function setArchiveAnswerCount($archive_answer_count)
    {
        $this->container['archive_answer_count'] = $archive_answer_count;

        return $this;
    }

    /**
     * Gets logo_id
     * @return int
     */
    public function getLogoId()
    {
        return $this->container['logo_id'];
    }

    /**
     * Sets logo_id
     * @param int $logo_id
     * @return $this
     */
    public function setLogoId($logo_id)
    {
        $this->container['logo_id'] = $logo_id;

        return $this;
    }

    /**
     * Gets language
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     * @param string $language Язык опроса
     * @return $this
     */
    public function setLanguage($language)
    {
        $allowed_values = array('ru', 'en');
        if (!in_array($language, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'language', must be one of 'ru', 'en'");
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets theme
     * @return string
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     * @param string $theme Цветовая схема опроса
     * @return $this
     */
    public function setTheme($theme)
    {
        $allowed_values = array('default', 'blue-green', 'brown', 'crimson', 'gray', 'green', 'purple', 'vinous');
        if (!in_array($theme, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'theme', must be one of 'default', 'blue-green', 'brown', 'crimson', 'gray', 'green', 'purple', 'vinous'");
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets show_startpage
     * @return bool
     */
    public function getShowStartpage()
    {
        return $this->container['show_startpage'];
    }

    /**
     * Sets show_startpage
     * @param bool $show_startpage Отображать страницу приветствия
     * @return $this
     */
    public function setShowStartpage($show_startpage)
    {
        $this->container['show_startpage'] = $show_startpage;

        return $this;
    }

    /**
     * Gets show_finishpage
     * @return bool
     */
    public function getShowFinishpage()
    {
        return $this->container['show_finishpage'];
    }

    /**
     * Sets show_finishpage
     * @param bool $show_finishpage Отображать страницу завершения
     * @return $this
     */
    public function setShowFinishpage($show_finishpage)
    {
        $this->container['show_finishpage'] = $show_finishpage;

        return $this;
    }

    /**
     * Gets startpage_text
     * @return string
     */
    public function getStartpageText()
    {
        return $this->container['startpage_text'];
    }

    /**
     * Sets startpage_text
     * @param string $startpage_text Текст на странице приветствия
     * @return $this
     */
    public function setStartpageText($startpage_text)
    {
        $this->container['startpage_text'] = $startpage_text;

        return $this;
    }

    /**
     * Gets finishpage_text
     * @return string
     */
    public function getFinishpageText()
    {
        return $this->container['finishpage_text'];
    }

    /**
     * Sets finishpage_text
     * @param string $finishpage_text Текст на странице завершения
     * @return $this
     */
    public function setFinishpageText($finishpage_text)
    {
        $this->container['finishpage_text'] = $finishpage_text;

        return $this;
    }

    /**
     * Gets disqualification_text
     * @return string
     */
    public function getDisqualificationText()
    {
        return $this->container['disqualification_text'];
    }

    /**
     * Sets disqualification_text
     * @param string $disqualification_text Текст на странице дисквалификации
     * @return $this
     */
    public function setDisqualificationText($disqualification_text)
    {
        $this->container['disqualification_text'] = $disqualification_text;

        return $this;
    }

    /**
     * Gets show_captcha
     * @return bool
     */
    public function getShowCaptcha()
    {
        return $this->container['show_captcha'];
    }

    /**
     * Sets show_captcha
     * @param bool $show_captcha Отображать капчу перед завершения опроса
     * @return $this
     */
    public function setShowCaptcha($show_captcha)
    {
        $this->container['show_captcha'] = $show_captcha;

        return $this;
    }

    /**
     * Gets show_social
     * @return bool
     */
    public function getShowSocial()
    {
        return $this->container['show_social'];
    }

    /**
     * Sets show_social
     * @param bool $show_social Кнопки \"поделиться\" на странице завершения
     * @return $this
     */
    public function setShowSocial($show_social)
    {
        $this->container['show_social'] = $show_social;

        return $this;
    }

    /**
     * Gets show_question_count
     * @return bool
     */
    public function getShowQuestionCount()
    {
        return $this->container['show_question_count'];
    }

    /**
     * Sets show_question_count
     * @param bool $show_question_count Отображать количество вопросов
     * @return $this
     */
    public function setShowQuestionCount($show_question_count)
    {
        $this->container['show_question_count'] = $show_question_count;

        return $this;
    }

    /**
     * Gets show_survey_name
     * @return bool
     */
    public function getShowSurveyName()
    {
        return $this->container['show_survey_name'];
    }

    /**
     * Sets show_survey_name
     * @param bool $show_survey_name Отображать название опроса
     * @return $this
     */
    public function setShowSurveyName($show_survey_name)
    {
        $this->container['show_survey_name'] = $show_survey_name;

        return $this;
    }

    /**
     * Gets show_previous_btn
     * @return bool
     */
    public function getShowPreviousBtn()
    {
        return $this->container['show_previous_btn'];
    }

    /**
     * Sets show_previous_btn
     * @param bool $show_previous_btn Копка \"назад\"
     * @return $this
     */
    public function setShowPreviousBtn($show_previous_btn)
    {
        $this->container['show_previous_btn'] = $show_previous_btn;

        return $this;
    }

    /**
     * Gets finish_type
     * @return string
     */
    public function getFinishType()
    {
        return $this->container['finish_type'];
    }

    /**
     * Sets finish_type
     * @param string $finish_type Тип завершения анкеты  * `our-survey` - опросы от anketolog.ru (по умолчанию) * `custom-survey` - собственные опросы * `redirect` - перенаправление на другой URL
     * @return $this
     */
    public function setFinishType($finish_type)
    {
        $allowed_values = array('our-survey', 'custom-survey', 'redirect');
        if (!in_array($finish_type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'finish_type', must be one of 'our-survey', 'custom-survey', 'redirect'");
        }
        $this->container['finish_type'] = $finish_type;

        return $this;
    }

    /**
     * Gets finish_redirect_url
     * @return string
     */
    public function getFinishRedirectUrl()
    {
        return $this->container['finish_redirect_url'];
    }

    /**
     * Sets finish_redirect_url
     * @param string $finish_redirect_url URL для редиректа [finish_type=redirect]
     * @return $this
     */
    public function setFinishRedirectUrl($finish_redirect_url)
    {
        $this->container['finish_redirect_url'] = $finish_redirect_url;

        return $this;
    }

    /**
     * Gets finish_redirect_timeout
     * @return int
     */
    public function getFinishRedirectTimeout()
    {
        return $this->container['finish_redirect_timeout'];
    }

    /**
     * Sets finish_redirect_timeout
     * @param int $finish_redirect_timeout Таймаут редиректа [finish_type=redirect]
     * @return $this
     */
    public function setFinishRedirectTimeout($finish_redirect_timeout)
    {
        $this->container['finish_redirect_timeout'] = $finish_redirect_timeout;

        return $this;
    }

    /**
     * Gets finish_custom_surveys
     * @return string[]
     */
    public function getFinishCustomSurveys()
    {
        return $this->container['finish_custom_surveys'];
    }

    /**
     * Sets finish_custom_surveys
     * @param string[] $finish_custom_surveys Анкеты на странице завершения [finish_type=custom-survey]
     * @return $this
     */
    public function setFinishCustomSurveys($finish_custom_surveys)
    {
        $this->container['finish_custom_surveys'] = $finish_custom_surveys;

        return $this;
    }

    /**
     * Gets disable_ad
     * @return bool
     */
    public function getDisableAd()
    {
        return $this->container['disable_ad'];
    }

    /**
     * Sets disable_ad
     * @param bool $disable_ad Отключить рекламу в опросе
     * @return $this
     */
    public function setDisableAd($disable_ad)
    {
        $this->container['disable_ad'] = $disable_ad;

        return $this;
    }

    /**
     * Gets custom_css
     * @return string
     */
    public function getCustomCss()
    {
        return $this->container['custom_css'];
    }

    /**
     * Sets custom_css
     * @param string $custom_css Пользовательская CSS
     * @return $this
     */
    public function setCustomCss($custom_css)
    {
        $this->container['custom_css'] = $custom_css;

        return $this;
    }

    /**
     * Gets credentials_enable
     * @return bool
     */
    public function getCredentialsEnable()
    {
        return $this->container['credentials_enable'];
    }

    /**
     * Sets credentials_enable
     * @param bool $credentials_enable Заполнения опроса по логину и паролю
     * @return $this
     */
    public function setCredentialsEnable($credentials_enable)
    {
        $this->container['credentials_enable'] = $credentials_enable;

        return $this;
    }

    /**
     * Gets credentials
     * @return \AnketologClient\Model\SurveyeditorupdateSettingsConfigCredentials[]
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     * @param \AnketologClient\Model\SurveyeditorupdateSettingsConfigCredentials[] $credentials
     * @return $this
     */
    public function setCredentials($credentials)
    {
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets redirect_finish
     * @return bool
     */
    public function getRedirectFinish()
    {
        return $this->container['redirect_finish'];
    }

    /**
     * Sets redirect_finish
     * @param bool $redirect_finish Включить редирект при завершении анкеты
     * @return $this
     */
    public function setRedirectFinish($redirect_finish)
    {
        $this->container['redirect_finish'] = $redirect_finish;

        return $this;
    }

    /**
     * Gets redirect_finish_url
     * @return string
     */
    public function getRedirectFinishUrl()
    {
        return $this->container['redirect_finish_url'];
    }

    /**
     * Sets redirect_finish_url
     * @param string $redirect_finish_url URL страницы для редиректа при завершении анкеты
     * @return $this
     */
    public function setRedirectFinishUrl($redirect_finish_url)
    {
        $this->container['redirect_finish_url'] = $redirect_finish_url;

        return $this;
    }

    /**
     * Gets redirect_finish_timeout
     * @return int
     */
    public function getRedirectFinishTimeout()
    {
        return $this->container['redirect_finish_timeout'];
    }

    /**
     * Sets redirect_finish_timeout
     * @param int $redirect_finish_timeout Таймаут редиректа в секундах (0 - 60сек) при завершении анкеты
     * @return $this
     */
    public function setRedirectFinishTimeout($redirect_finish_timeout)
    {
        $this->container['redirect_finish_timeout'] = $redirect_finish_timeout;

        return $this;
    }

    /**
     * Gets redirect_disqualification
     * @return bool
     */
    public function getRedirectDisqualification()
    {
        return $this->container['redirect_disqualification'];
    }

    /**
     * Sets redirect_disqualification
     * @param bool $redirect_disqualification Включить редирект при дисквалификации
     * @return $this
     */
    public function setRedirectDisqualification($redirect_disqualification)
    {
        $this->container['redirect_disqualification'] = $redirect_disqualification;

        return $this;
    }

    /**
     * Gets redirect_disqualification_url
     * @return string
     */
    public function getRedirectDisqualificationUrl()
    {
        return $this->container['redirect_disqualification_url'];
    }

    /**
     * Sets redirect_disqualification_url
     * @param string $redirect_disqualification_url URL страницы для редиректа при дисквалификации
     * @return $this
     */
    public function setRedirectDisqualificationUrl($redirect_disqualification_url)
    {
        $this->container['redirect_disqualification_url'] = $redirect_disqualification_url;

        return $this;
    }

    /**
     * Gets redirect_disqualification_timeout
     * @return int
     */
    public function getRedirectDisqualificationTimeout()
    {
        return $this->container['redirect_disqualification_timeout'];
    }

    /**
     * Sets redirect_disqualification_timeout
     * @param int $redirect_disqualification_timeout Таймаут редиректа в секундах (0 - 60сек) при дисквалификации
     * @return $this
     */
    public function setRedirectDisqualificationTimeout($redirect_disqualification_timeout)
    {
        $this->container['redirect_disqualification_timeout'] = $redirect_disqualification_timeout;

        return $this;
    }

    /**
     * Gets redirect_disqualification_quote
     * @return bool
     */
    public function getRedirectDisqualificationQuote()
    {
        return $this->container['redirect_disqualification_quote'];
    }

    /**
     * Sets redirect_disqualification_quote
     * @param bool $redirect_disqualification_quote Включить редирект при дисквалификации по квоте
     * @return $this
     */
    public function setRedirectDisqualificationQuote($redirect_disqualification_quote)
    {
        $this->container['redirect_disqualification_quote'] = $redirect_disqualification_quote;

        return $this;
    }

    /**
     * Gets redirect_disqualification_quote_url
     * @return string
     */
    public function getRedirectDisqualificationQuoteUrl()
    {
        return $this->container['redirect_disqualification_quote_url'];
    }

    /**
     * Sets redirect_disqualification_quote_url
     * @param string $redirect_disqualification_quote_url URL страницы для редиректа при дисквалификации по квоте
     * @return $this
     */
    public function setRedirectDisqualificationQuoteUrl($redirect_disqualification_quote_url)
    {
        $this->container['redirect_disqualification_quote_url'] = $redirect_disqualification_quote_url;

        return $this;
    }

    /**
     * Gets redirect_disqualification_quote_timeout
     * @return int
     */
    public function getRedirectDisqualificationQuoteTimeout()
    {
        return $this->container['redirect_disqualification_quote_timeout'];
    }

    /**
     * Sets redirect_disqualification_quote_timeout
     * @param int $redirect_disqualification_quote_timeout Таймаут редиректа в секундах (0 - 60сек) при дисквалификации по квоте
     * @return $this
     */
    public function setRedirectDisqualificationQuoteTimeout($redirect_disqualification_quote_timeout)
    {
        $this->container['redirect_disqualification_quote_timeout'] = $redirect_disqualification_quote_timeout;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


