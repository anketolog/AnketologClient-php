<?php
/**
 * CampaignTargetingSportIAktivnyyOtdyh
 *
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Анкетолог API v2.0
 *
 * ### Клиенты:  * [**PHP**](https://github.com/anketolog/AnketologClient-php)  ### Клиенты на других языках:  * Скачайте конфигурационный [swagger-файл](https://anketolog.ru/api/external/v2/docs/anketolog.yaml) * Воспользуйтесь официальным [генератором](http://swagger.io/swagger-codegen/)   ([список поддерживаемых языков](https://github.com/swagger-api/swagger-codegen#api-clients))  ### Ключ для доступа к API  Ключ для доступа к API можно получить в [разделе настроек](https://anketolog.ru/user/account/api)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Model;

use \ArrayAccess;

/**
 * CampaignTargetingSportIAktivnyyOtdyh Class Doc Comment
 *
 * @category    Class */
 // @description Группа &#x60;Спорт и активный отдых&#x60; (+10 руб. к стоимости ответа)
/** 
 * @package     AnketologClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CampaignTargetingSportIAktivnyyOtdyh implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CampaignTargetingSportIAktivnyyOtdyh';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'is_enable' => 'bool',
        'vid_sporta' => 'string[]',
        'pokupka_sportivnyh_tovarov' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'is_enable' => 'is_enable',
        'vid_sporta' => 'vid_sporta',
        'pokupka_sportivnyh_tovarov' => 'pokupka_sportivnyh_tovarov'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'is_enable' => 'setIsEnable',
        'vid_sporta' => 'setVidSporta',
        'pokupka_sportivnyh_tovarov' => 'setPokupkaSportivnyhTovarov'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'is_enable' => 'getIsEnable',
        'vid_sporta' => 'getVidSporta',
        'pokupka_sportivnyh_tovarov' => 'getPokupkaSportivnyhTovarov'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const VID_SPORTA__0 = 'option_0';
    const VID_SPORTA__1 = 'option_1';
    const VID_SPORTA__2 = 'option_2';
    const VID_SPORTA__3 = 'option_3';
    const VID_SPORTA__4 = 'option_4';
    const VID_SPORTA__5 = 'option_5';
    const VID_SPORTA__6 = 'option_6';
    const VID_SPORTA__7 = 'option_7';
    const VID_SPORTA__8 = 'option_8';
    const VID_SPORTA__9 = 'option_9';
    const VID_SPORTA__10 = 'option_10';
    const VID_SPORTA__11 = 'option_11';
    const VID_SPORTA__12 = 'option_12';
    const VID_SPORTA__13 = 'option_13';
    const VID_SPORTA__14 = 'option_14';
    const VID_SPORTA__15 = 'option_15';
    const VID_SPORTA__16 = 'option_16';
    const VID_SPORTA__17 = 'option_17';
    const VID_SPORTA__18 = 'option_18';
    const VID_SPORTA__19 = 'option_19';
    const VID_SPORTA__20 = 'option_20';
    const VID_SPORTA__21 = 'option_21';
    const VID_SPORTA__22 = 'option_22';
    const VID_SPORTA__23 = 'option_23';
    const VID_SPORTA__24 = 'option_24';
    const VID_SPORTA__25 = 'option_25';
    const VID_SPORTA__26 = 'option_26';
    const VID_SPORTA__27 = 'option_27';
    const VID_SPORTA__28 = 'option_28';
    const VID_SPORTA__29 = 'option_29';
    const VID_SPORTA__30 = 'option_30';
    const VID_SPORTA__31 = 'option_31';
    const VID_SPORTA__32 = 'option_32';
    const VID_SPORTA__33 = 'option_33';
    const VID_SPORTA__34 = 'option_34';
    const VID_SPORTA__35 = 'option_35';
    const VID_SPORTA__36 = 'option_36';
    const VID_SPORTA__37 = 'option_37';
    const VID_SPORTA__38 = 'option_38';
    const VID_SPORTA__39 = 'option_39';
    const VID_SPORTA__40 = 'option_40';
    const VID_SPORTA__41 = 'option_41';
    const VID_SPORTA__42 = 'option_42';
    const POKUPKA_SPORTIVNYH_TOVAROV__0 = 'option_0';
    const POKUPKA_SPORTIVNYH_TOVAROV__1 = 'option_1';
    const POKUPKA_SPORTIVNYH_TOVAROV__2 = 'option_2';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getVidSportaAllowableValues()
    {
        return [
            self::VID_SPORTA__0,
            self::VID_SPORTA__1,
            self::VID_SPORTA__2,
            self::VID_SPORTA__3,
            self::VID_SPORTA__4,
            self::VID_SPORTA__5,
            self::VID_SPORTA__6,
            self::VID_SPORTA__7,
            self::VID_SPORTA__8,
            self::VID_SPORTA__9,
            self::VID_SPORTA__10,
            self::VID_SPORTA__11,
            self::VID_SPORTA__12,
            self::VID_SPORTA__13,
            self::VID_SPORTA__14,
            self::VID_SPORTA__15,
            self::VID_SPORTA__16,
            self::VID_SPORTA__17,
            self::VID_SPORTA__18,
            self::VID_SPORTA__19,
            self::VID_SPORTA__20,
            self::VID_SPORTA__21,
            self::VID_SPORTA__22,
            self::VID_SPORTA__23,
            self::VID_SPORTA__24,
            self::VID_SPORTA__25,
            self::VID_SPORTA__26,
            self::VID_SPORTA__27,
            self::VID_SPORTA__28,
            self::VID_SPORTA__29,
            self::VID_SPORTA__30,
            self::VID_SPORTA__31,
            self::VID_SPORTA__32,
            self::VID_SPORTA__33,
            self::VID_SPORTA__34,
            self::VID_SPORTA__35,
            self::VID_SPORTA__36,
            self::VID_SPORTA__37,
            self::VID_SPORTA__38,
            self::VID_SPORTA__39,
            self::VID_SPORTA__40,
            self::VID_SPORTA__41,
            self::VID_SPORTA__42,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPokupkaSportivnyhTovarovAllowableValues()
    {
        return [
            self::POKUPKA_SPORTIVNYH_TOVAROV__0,
            self::POKUPKA_SPORTIVNYH_TOVAROV__1,
            self::POKUPKA_SPORTIVNYH_TOVAROV__2,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_enable'] = isset($data['is_enable']) ? $data['is_enable'] : null;
        $this->container['vid_sporta'] = isset($data['vid_sporta']) ? $data['vid_sporta'] : null;
        $this->container['pokupka_sportivnyh_tovarov'] = isset($data['pokupka_sportivnyh_tovarov']) ? $data['pokupka_sportivnyh_tovarov'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets is_enable
     * @return bool
     */
    public function getIsEnable()
    {
        return $this->container['is_enable'];
    }

    /**
     * Sets is_enable
     * @param bool $is_enable Группа включена
     * @return $this
     */
    public function setIsEnable($is_enable)
    {
        $this->container['is_enable'] = $is_enable;

        return $this;
    }

    /**
     * Gets vid_sporta
     * @return string[]
     */
    public function getVidSporta()
    {
        return $this->container['vid_sporta'];
    }

    /**
     * Sets vid_sporta
     * @param string[] $vid_sporta Параметр `Вид спорта`  * `option_0` - Автоспорт * `option_1` - Айкидо * `option_2` - Бадминтон * `option_3` - Баскетбол * `option_4` - Бег * `option_5` - Бег на лыжах/биатлон * `option_6` - Бильярд * `option_7` - Бобслей/санный спорт * `option_8` - Бодибилдинг * `option_9` - Большой теннис * `option_10` - Бросание гранаты, мяча * `option_11` - Велоспорт * `option_12` - Гимнастика * `option_13` - Го * `option_14` - Гольф * `option_15` - Горнолыжный спорт/сноуборд * `option_16` - Джиу-джитсу * `option_17` - Другое единоборство * `option_18` - Йога * `option_19` - Капоэйра * `option_20` - Карате * `option_21` - Метание диска * `option_22` - Метание молота * `option_23` - Нарды * `option_24` - Настольный теннис * `option_25` - Плавание * `option_26` - Прыжки в высоту * `option_27` - Прыжки в длину * `option_28` - Прыжки с шестом * `option_29` - Самбо * `option_30` - Спортивная ходьба * `option_31` - Спортивные танцы * `option_32` - Спортивный бридж * `option_33` - Спортивный покер * `option_34` - Стрельба * `option_35` - Таэквондо * `option_36` - Толкание ядра * `option_37` - Фигурное катание (катание на коньках) * `option_38` - Фитнес * `option_39` - Футбол * `option_40` - Хоккей * `option_41` - Шахматы * `option_42` - Шашки
     * @return $this
     */
    public function setVidSporta($vid_sporta)
    {
        $allowed_values = array('option_0', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6', 'option_7', 'option_8', 'option_9', 'option_10', 'option_11', 'option_12', 'option_13', 'option_14', 'option_15', 'option_16', 'option_17', 'option_18', 'option_19', 'option_20', 'option_21', 'option_22', 'option_23', 'option_24', 'option_25', 'option_26', 'option_27', 'option_28', 'option_29', 'option_30', 'option_31', 'option_32', 'option_33', 'option_34', 'option_35', 'option_36', 'option_37', 'option_38', 'option_39', 'option_40', 'option_41', 'option_42');
        if (!in_array($vid_sporta, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'vid_sporta', must be one of 'option_0', 'option_1', 'option_2', 'option_3', 'option_4', 'option_5', 'option_6', 'option_7', 'option_8', 'option_9', 'option_10', 'option_11', 'option_12', 'option_13', 'option_14', 'option_15', 'option_16', 'option_17', 'option_18', 'option_19', 'option_20', 'option_21', 'option_22', 'option_23', 'option_24', 'option_25', 'option_26', 'option_27', 'option_28', 'option_29', 'option_30', 'option_31', 'option_32', 'option_33', 'option_34', 'option_35', 'option_36', 'option_37', 'option_38', 'option_39', 'option_40', 'option_41', 'option_42'");
        }
        $this->container['vid_sporta'] = $vid_sporta;

        return $this;
    }

    /**
     * Gets pokupka_sportivnyh_tovarov
     * @return string[]
     */
    public function getPokupkaSportivnyhTovarov()
    {
        return $this->container['pokupka_sportivnyh_tovarov'];
    }

    /**
     * Sets pokupka_sportivnyh_tovarov
     * @param string[] $pokupka_sportivnyh_tovarov Параметр `Покупка спортивных товаров`  * `option_0` - спортивная одежда/обувь * `option_1` - спортивный инвентарь * `option_2` - спортивное питание
     * @return $this
     */
    public function setPokupkaSportivnyhTovarov($pokupka_sportivnyh_tovarov)
    {
        $allowed_values = array('option_0', 'option_1', 'option_2');
        if (!in_array($pokupka_sportivnyh_tovarov, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'pokupka_sportivnyh_tovarov', must be one of 'option_0', 'option_1', 'option_2'");
        }
        $this->container['pokupka_sportivnyh_tovarov'] = $pokupka_sportivnyh_tovarov;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


