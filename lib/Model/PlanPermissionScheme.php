<?php
/**
 * PlanPermissionScheme
 *
 * PHP version 5
 *
 * @category Class
 * @package  AnketologClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Документация к Анкетолог API (beta-версия)
 *
 * ### Библиотеки для работы с API  * **PHP** https://github.com/anketolog/AnketologClient-php  ### Библиотеки на других языках  Вы можете самостоятельно сгенерировать библиотеку, [на любом доступном языке](https://github.com/swagger-api/swagger-codegen#api-clients), воспользовавшись [генератором](http://swagger.io/swagger-codegen). Конфигурационный файл можно скачать по [этой ссылке](https://anketolog.ru/api/external/v2/anketolog.yaml).  ### Работа с API  Работа с API осуществляется при помощи отправки POST-запросов на адрес:  ``` https://apiv2.anketolog.ru/{resource} ```  Необходимые параметры передаются в теле запроса в виде JSON-строки:  ``` {     \"survey_id\": \"ID опроса\" } ```  Для авторизации необходимо передать заголовок **X-Anketolog-ApiKey** в запросе:  ``` X-Anketolog-ApiKey: API_KEY ```  Ключ доступа к API можно получить в [разделе настроек](https://anketolog.ru/user/account/apikey).   ### Пример запроса  ``` curl -X POST \\   --header 'X-Anketolog-ApiKey: API_KEY' \\   -d '{\"survey_id\": \"ID опроса\"}' \\   'https://apiv2.anketolog.ru/survey/manage/info' ```  ### Webhook  Webhook – это уведомление сторонних приложений о событиях, произошедших на сайте anketolog.ru, путем отправки уведомлений. Во время возникновения события сервер посылает POST-запрос по адресу, который указан в URL. Настроить Webhook можно в [разделе настроек](https://anketolog.loc/user/account/apikey).
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace AnketologClient\Model;

use \ArrayAccess;

/**
 * PlanPermissionScheme Class Doc Comment
 *
 * @category    Class */
 // @description Схема ограничений тарифного плана
/** 
 * @package     AnketologClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PlanPermissionScheme implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PlanPermissionScheme';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'max_surveys' => 'int',
        'max_personalpages' => 'int',
        'max_questions' => 'int',
        'max_subscribes' => 'int',
        'max_answers_total' => 'int',
        'max_disk_quota' => 'int',
        'max_survey_extralinks' => 'int',
        'max_survey_credentials' => 'int',
        'max_personalpage_surveys' => 'int',
        'allow_alias' => 'bool',
        'allow_theme' => 'bool',
        'allow_survey_finish' => 'bool',
        'allow_disable_ad' => 'bool',
        'allow_answer_filter' => 'bool',
        'allow_export' => 'bool',
        'allow_survey_catalog' => 'bool',
        'allow_enable_captcha' => 'bool',
        'allow_hide_question_count' => 'bool',
        'allow_office_url' => 'bool',
        'allow_personalpage_image' => 'bool',
        'allow_survey_image' => 'bool',
        'allow_hide_survey_name' => 'bool',
        'allow_insert_video' => 'bool',
        'allow_personalpage_bgimage' => 'bool',
        'allow_personalpage_bgcolor' => 'bool',
        'allow_custom_css' => 'bool',
        'allow_survey_branchrules' => 'bool',
        'allow_survey_visiblerules' => 'bool',
        'allow_randomization' => 'bool',
        'allow_related' => 'bool',
        'allow_calculate_nps' => 'bool',
        'allow_insert_params' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'max_surveys' => 'max_surveys',
        'max_personalpages' => 'max_personalpages',
        'max_questions' => 'max_questions',
        'max_subscribes' => 'max_subscribes',
        'max_answers_total' => 'max_answers_total',
        'max_disk_quota' => 'max_disk_quota',
        'max_survey_extralinks' => 'max_survey_extralinks',
        'max_survey_credentials' => 'max_survey_credentials',
        'max_personalpage_surveys' => 'max_personalpage_surveys',
        'allow_alias' => 'allow_alias',
        'allow_theme' => 'allow_theme',
        'allow_survey_finish' => 'allow_survey_finish',
        'allow_disable_ad' => 'allow_disable_ad',
        'allow_answer_filter' => 'allow_answer_filter',
        'allow_export' => 'allow_export',
        'allow_survey_catalog' => 'allow_survey_catalog',
        'allow_enable_captcha' => 'allow_enable_captcha',
        'allow_hide_question_count' => 'allow_hide_question_count',
        'allow_office_url' => 'allow_office_url',
        'allow_personalpage_image' => 'allow_personalpage_image',
        'allow_survey_image' => 'allow_survey_image',
        'allow_hide_survey_name' => 'allow_hide_survey_name',
        'allow_insert_video' => 'allow_insert_video',
        'allow_personalpage_bgimage' => 'allow_personalpage_bgimage',
        'allow_personalpage_bgcolor' => 'allow_personalpage_bgcolor',
        'allow_custom_css' => 'allow_custom_css',
        'allow_survey_branchrules' => 'allow_survey_branchrules',
        'allow_survey_visiblerules' => 'allow_survey_visiblerules',
        'allow_randomization' => 'allow_randomization',
        'allow_related' => 'allow_related',
        'allow_calculate_nps' => 'allow_calculate_nps',
        'allow_insert_params' => 'allow_insert_params'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'max_surveys' => 'setMaxSurveys',
        'max_personalpages' => 'setMaxPersonalpages',
        'max_questions' => 'setMaxQuestions',
        'max_subscribes' => 'setMaxSubscribes',
        'max_answers_total' => 'setMaxAnswersTotal',
        'max_disk_quota' => 'setMaxDiskQuota',
        'max_survey_extralinks' => 'setMaxSurveyExtralinks',
        'max_survey_credentials' => 'setMaxSurveyCredentials',
        'max_personalpage_surveys' => 'setMaxPersonalpageSurveys',
        'allow_alias' => 'setAllowAlias',
        'allow_theme' => 'setAllowTheme',
        'allow_survey_finish' => 'setAllowSurveyFinish',
        'allow_disable_ad' => 'setAllowDisableAd',
        'allow_answer_filter' => 'setAllowAnswerFilter',
        'allow_export' => 'setAllowExport',
        'allow_survey_catalog' => 'setAllowSurveyCatalog',
        'allow_enable_captcha' => 'setAllowEnableCaptcha',
        'allow_hide_question_count' => 'setAllowHideQuestionCount',
        'allow_office_url' => 'setAllowOfficeUrl',
        'allow_personalpage_image' => 'setAllowPersonalpageImage',
        'allow_survey_image' => 'setAllowSurveyImage',
        'allow_hide_survey_name' => 'setAllowHideSurveyName',
        'allow_insert_video' => 'setAllowInsertVideo',
        'allow_personalpage_bgimage' => 'setAllowPersonalpageBgimage',
        'allow_personalpage_bgcolor' => 'setAllowPersonalpageBgcolor',
        'allow_custom_css' => 'setAllowCustomCss',
        'allow_survey_branchrules' => 'setAllowSurveyBranchrules',
        'allow_survey_visiblerules' => 'setAllowSurveyVisiblerules',
        'allow_randomization' => 'setAllowRandomization',
        'allow_related' => 'setAllowRelated',
        'allow_calculate_nps' => 'setAllowCalculateNps',
        'allow_insert_params' => 'setAllowInsertParams'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'max_surveys' => 'getMaxSurveys',
        'max_personalpages' => 'getMaxPersonalpages',
        'max_questions' => 'getMaxQuestions',
        'max_subscribes' => 'getMaxSubscribes',
        'max_answers_total' => 'getMaxAnswersTotal',
        'max_disk_quota' => 'getMaxDiskQuota',
        'max_survey_extralinks' => 'getMaxSurveyExtralinks',
        'max_survey_credentials' => 'getMaxSurveyCredentials',
        'max_personalpage_surveys' => 'getMaxPersonalpageSurveys',
        'allow_alias' => 'getAllowAlias',
        'allow_theme' => 'getAllowTheme',
        'allow_survey_finish' => 'getAllowSurveyFinish',
        'allow_disable_ad' => 'getAllowDisableAd',
        'allow_answer_filter' => 'getAllowAnswerFilter',
        'allow_export' => 'getAllowExport',
        'allow_survey_catalog' => 'getAllowSurveyCatalog',
        'allow_enable_captcha' => 'getAllowEnableCaptcha',
        'allow_hide_question_count' => 'getAllowHideQuestionCount',
        'allow_office_url' => 'getAllowOfficeUrl',
        'allow_personalpage_image' => 'getAllowPersonalpageImage',
        'allow_survey_image' => 'getAllowSurveyImage',
        'allow_hide_survey_name' => 'getAllowHideSurveyName',
        'allow_insert_video' => 'getAllowInsertVideo',
        'allow_personalpage_bgimage' => 'getAllowPersonalpageBgimage',
        'allow_personalpage_bgcolor' => 'getAllowPersonalpageBgcolor',
        'allow_custom_css' => 'getAllowCustomCss',
        'allow_survey_branchrules' => 'getAllowSurveyBranchrules',
        'allow_survey_visiblerules' => 'getAllowSurveyVisiblerules',
        'allow_randomization' => 'getAllowRandomization',
        'allow_related' => 'getAllowRelated',
        'allow_calculate_nps' => 'getAllowCalculateNps',
        'allow_insert_params' => 'getAllowInsertParams'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['max_surveys'] = isset($data['max_surveys']) ? $data['max_surveys'] : null;
        $this->container['max_personalpages'] = isset($data['max_personalpages']) ? $data['max_personalpages'] : null;
        $this->container['max_questions'] = isset($data['max_questions']) ? $data['max_questions'] : null;
        $this->container['max_subscribes'] = isset($data['max_subscribes']) ? $data['max_subscribes'] : null;
        $this->container['max_answers_total'] = isset($data['max_answers_total']) ? $data['max_answers_total'] : null;
        $this->container['max_disk_quota'] = isset($data['max_disk_quota']) ? $data['max_disk_quota'] : null;
        $this->container['max_survey_extralinks'] = isset($data['max_survey_extralinks']) ? $data['max_survey_extralinks'] : null;
        $this->container['max_survey_credentials'] = isset($data['max_survey_credentials']) ? $data['max_survey_credentials'] : null;
        $this->container['max_personalpage_surveys'] = isset($data['max_personalpage_surveys']) ? $data['max_personalpage_surveys'] : null;
        $this->container['allow_alias'] = isset($data['allow_alias']) ? $data['allow_alias'] : null;
        $this->container['allow_theme'] = isset($data['allow_theme']) ? $data['allow_theme'] : null;
        $this->container['allow_survey_finish'] = isset($data['allow_survey_finish']) ? $data['allow_survey_finish'] : null;
        $this->container['allow_disable_ad'] = isset($data['allow_disable_ad']) ? $data['allow_disable_ad'] : null;
        $this->container['allow_answer_filter'] = isset($data['allow_answer_filter']) ? $data['allow_answer_filter'] : null;
        $this->container['allow_export'] = isset($data['allow_export']) ? $data['allow_export'] : null;
        $this->container['allow_survey_catalog'] = isset($data['allow_survey_catalog']) ? $data['allow_survey_catalog'] : null;
        $this->container['allow_enable_captcha'] = isset($data['allow_enable_captcha']) ? $data['allow_enable_captcha'] : null;
        $this->container['allow_hide_question_count'] = isset($data['allow_hide_question_count']) ? $data['allow_hide_question_count'] : null;
        $this->container['allow_office_url'] = isset($data['allow_office_url']) ? $data['allow_office_url'] : null;
        $this->container['allow_personalpage_image'] = isset($data['allow_personalpage_image']) ? $data['allow_personalpage_image'] : null;
        $this->container['allow_survey_image'] = isset($data['allow_survey_image']) ? $data['allow_survey_image'] : null;
        $this->container['allow_hide_survey_name'] = isset($data['allow_hide_survey_name']) ? $data['allow_hide_survey_name'] : null;
        $this->container['allow_insert_video'] = isset($data['allow_insert_video']) ? $data['allow_insert_video'] : null;
        $this->container['allow_personalpage_bgimage'] = isset($data['allow_personalpage_bgimage']) ? $data['allow_personalpage_bgimage'] : null;
        $this->container['allow_personalpage_bgcolor'] = isset($data['allow_personalpage_bgcolor']) ? $data['allow_personalpage_bgcolor'] : null;
        $this->container['allow_custom_css'] = isset($data['allow_custom_css']) ? $data['allow_custom_css'] : null;
        $this->container['allow_survey_branchrules'] = isset($data['allow_survey_branchrules']) ? $data['allow_survey_branchrules'] : null;
        $this->container['allow_survey_visiblerules'] = isset($data['allow_survey_visiblerules']) ? $data['allow_survey_visiblerules'] : null;
        $this->container['allow_randomization'] = isset($data['allow_randomization']) ? $data['allow_randomization'] : null;
        $this->container['allow_related'] = isset($data['allow_related']) ? $data['allow_related'] : null;
        $this->container['allow_calculate_nps'] = isset($data['allow_calculate_nps']) ? $data['allow_calculate_nps'] : null;
        $this->container['allow_insert_params'] = isset($data['allow_insert_params']) ? $data['allow_insert_params'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['allow_alias'] === null) {
            $invalid_properties[] = "'allow_alias' can't be null";
        }
        if ($this->container['allow_theme'] === null) {
            $invalid_properties[] = "'allow_theme' can't be null";
        }
        if ($this->container['allow_survey_finish'] === null) {
            $invalid_properties[] = "'allow_survey_finish' can't be null";
        }
        if ($this->container['allow_disable_ad'] === null) {
            $invalid_properties[] = "'allow_disable_ad' can't be null";
        }
        if ($this->container['allow_answer_filter'] === null) {
            $invalid_properties[] = "'allow_answer_filter' can't be null";
        }
        if ($this->container['allow_export'] === null) {
            $invalid_properties[] = "'allow_export' can't be null";
        }
        if ($this->container['allow_survey_catalog'] === null) {
            $invalid_properties[] = "'allow_survey_catalog' can't be null";
        }
        if ($this->container['allow_enable_captcha'] === null) {
            $invalid_properties[] = "'allow_enable_captcha' can't be null";
        }
        if ($this->container['allow_hide_question_count'] === null) {
            $invalid_properties[] = "'allow_hide_question_count' can't be null";
        }
        if ($this->container['allow_office_url'] === null) {
            $invalid_properties[] = "'allow_office_url' can't be null";
        }
        if ($this->container['allow_personalpage_image'] === null) {
            $invalid_properties[] = "'allow_personalpage_image' can't be null";
        }
        if ($this->container['allow_survey_image'] === null) {
            $invalid_properties[] = "'allow_survey_image' can't be null";
        }
        if ($this->container['allow_hide_survey_name'] === null) {
            $invalid_properties[] = "'allow_hide_survey_name' can't be null";
        }
        if ($this->container['allow_insert_video'] === null) {
            $invalid_properties[] = "'allow_insert_video' can't be null";
        }
        if ($this->container['allow_personalpage_bgimage'] === null) {
            $invalid_properties[] = "'allow_personalpage_bgimage' can't be null";
        }
        if ($this->container['allow_personalpage_bgcolor'] === null) {
            $invalid_properties[] = "'allow_personalpage_bgcolor' can't be null";
        }
        if ($this->container['allow_custom_css'] === null) {
            $invalid_properties[] = "'allow_custom_css' can't be null";
        }
        if ($this->container['allow_survey_branchrules'] === null) {
            $invalid_properties[] = "'allow_survey_branchrules' can't be null";
        }
        if ($this->container['allow_survey_visiblerules'] === null) {
            $invalid_properties[] = "'allow_survey_visiblerules' can't be null";
        }
        if ($this->container['allow_randomization'] === null) {
            $invalid_properties[] = "'allow_randomization' can't be null";
        }
        if ($this->container['allow_related'] === null) {
            $invalid_properties[] = "'allow_related' can't be null";
        }
        if ($this->container['allow_calculate_nps'] === null) {
            $invalid_properties[] = "'allow_calculate_nps' can't be null";
        }
        if ($this->container['allow_insert_params'] === null) {
            $invalid_properties[] = "'allow_insert_params' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['allow_alias'] === null) {
            return false;
        }
        if ($this->container['allow_theme'] === null) {
            return false;
        }
        if ($this->container['allow_survey_finish'] === null) {
            return false;
        }
        if ($this->container['allow_disable_ad'] === null) {
            return false;
        }
        if ($this->container['allow_answer_filter'] === null) {
            return false;
        }
        if ($this->container['allow_export'] === null) {
            return false;
        }
        if ($this->container['allow_survey_catalog'] === null) {
            return false;
        }
        if ($this->container['allow_enable_captcha'] === null) {
            return false;
        }
        if ($this->container['allow_hide_question_count'] === null) {
            return false;
        }
        if ($this->container['allow_office_url'] === null) {
            return false;
        }
        if ($this->container['allow_personalpage_image'] === null) {
            return false;
        }
        if ($this->container['allow_survey_image'] === null) {
            return false;
        }
        if ($this->container['allow_hide_survey_name'] === null) {
            return false;
        }
        if ($this->container['allow_insert_video'] === null) {
            return false;
        }
        if ($this->container['allow_personalpage_bgimage'] === null) {
            return false;
        }
        if ($this->container['allow_personalpage_bgcolor'] === null) {
            return false;
        }
        if ($this->container['allow_custom_css'] === null) {
            return false;
        }
        if ($this->container['allow_survey_branchrules'] === null) {
            return false;
        }
        if ($this->container['allow_survey_visiblerules'] === null) {
            return false;
        }
        if ($this->container['allow_randomization'] === null) {
            return false;
        }
        if ($this->container['allow_related'] === null) {
            return false;
        }
        if ($this->container['allow_calculate_nps'] === null) {
            return false;
        }
        if ($this->container['allow_insert_params'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets max_surveys
     * @return int
     */
    public function getMaxSurveys()
    {
        return $this->container['max_surveys'];
    }

    /**
     * Sets max_surveys
     * @param int $max_surveys Максимум опросов
     * @return $this
     */
    public function setMaxSurveys($max_surveys)
    {
        $this->container['max_surveys'] = $max_surveys;

        return $this;
    }

    /**
     * Gets max_personalpages
     * @return int
     */
    public function getMaxPersonalpages()
    {
        return $this->container['max_personalpages'];
    }

    /**
     * Sets max_personalpages
     * @param int $max_personalpages Максимум персональных страниц
     * @return $this
     */
    public function setMaxPersonalpages($max_personalpages)
    {
        $this->container['max_personalpages'] = $max_personalpages;

        return $this;
    }

    /**
     * Gets max_questions
     * @return int
     */
    public function getMaxQuestions()
    {
        return $this->container['max_questions'];
    }

    /**
     * Sets max_questions
     * @param int $max_questions Максимум вопросов в опросе
     * @return $this
     */
    public function setMaxQuestions($max_questions)
    {
        $this->container['max_questions'] = $max_questions;

        return $this;
    }

    /**
     * Gets max_subscribes
     * @return int
     */
    public function getMaxSubscribes()
    {
        return $this->container['max_subscribes'];
    }

    /**
     * Sets max_subscribes
     * @param int $max_subscribes Максимум подписок на опрос
     * @return $this
     */
    public function setMaxSubscribes($max_subscribes)
    {
        $this->container['max_subscribes'] = $max_subscribes;

        return $this;
    }

    /**
     * Gets max_answers_total
     * @return int
     */
    public function getMaxAnswersTotal()
    {
        return $this->container['max_answers_total'];
    }

    /**
     * Sets max_answers_total
     * @param int $max_answers_total Максимум ответов на опрос
     * @return $this
     */
    public function setMaxAnswersTotal($max_answers_total)
    {
        $this->container['max_answers_total'] = $max_answers_total;

        return $this;
    }

    /**
     * Gets max_disk_quota
     * @return int
     */
    public function getMaxDiskQuota()
    {
        return $this->container['max_disk_quota'];
    }

    /**
     * Sets max_disk_quota
     * @param int $max_disk_quota Максимум доступного дискового пространства
     * @return $this
     */
    public function setMaxDiskQuota($max_disk_quota)
    {
        $this->container['max_disk_quota'] = $max_disk_quota;

        return $this;
    }

    /**
     * Gets max_survey_extralinks
     * @return int
     */
    public function getMaxSurveyExtralinks()
    {
        return $this->container['max_survey_extralinks'];
    }

    /**
     * Sets max_survey_extralinks
     * @param int $max_survey_extralinks Максимум дополнительных ссылок на опрос
     * @return $this
     */
    public function setMaxSurveyExtralinks($max_survey_extralinks)
    {
        $this->container['max_survey_extralinks'] = $max_survey_extralinks;

        return $this;
    }

    /**
     * Gets max_survey_credentials
     * @return int
     */
    public function getMaxSurveyCredentials()
    {
        return $this->container['max_survey_credentials'];
    }

    /**
     * Sets max_survey_credentials
     * @param int $max_survey_credentials Максимум доступов по логину/паролю к опросу
     * @return $this
     */
    public function setMaxSurveyCredentials($max_survey_credentials)
    {
        $this->container['max_survey_credentials'] = $max_survey_credentials;

        return $this;
    }

    /**
     * Gets max_personalpage_surveys
     * @return int
     */
    public function getMaxPersonalpageSurveys()
    {
        return $this->container['max_personalpage_surveys'];
    }

    /**
     * Sets max_personalpage_surveys
     * @param int $max_personalpage_surveys Максимум анкет на персональной странице
     * @return $this
     */
    public function setMaxPersonalpageSurveys($max_personalpage_surveys)
    {
        $this->container['max_personalpage_surveys'] = $max_personalpage_surveys;

        return $this;
    }

    /**
     * Gets allow_alias
     * @return bool
     */
    public function getAllowAlias()
    {
        return $this->container['allow_alias'];
    }

    /**
     * Sets allow_alias
     * @param bool $allow_alias Разрешено создавать именные ссылки
     * @return $this
     */
    public function setAllowAlias($allow_alias)
    {
        $this->container['allow_alias'] = $allow_alias;

        return $this;
    }

    /**
     * Gets allow_theme
     * @return bool
     */
    public function getAllowTheme()
    {
        return $this->container['allow_theme'];
    }

    /**
     * Sets allow_theme
     * @param bool $allow_theme Разрешено менять цветовую схему у опросов
     * @return $this
     */
    public function setAllowTheme($allow_theme)
    {
        $this->container['allow_theme'] = $allow_theme;

        return $this;
    }

    /**
     * Gets allow_survey_finish
     * @return bool
     */
    public function getAllowSurveyFinish()
    {
        return $this->container['allow_survey_finish'];
    }

    /**
     * Sets allow_survey_finish
     * @param bool $allow_survey_finish Разрешено настраивать завершение анкеты
     * @return $this
     */
    public function setAllowSurveyFinish($allow_survey_finish)
    {
        $this->container['allow_survey_finish'] = $allow_survey_finish;

        return $this;
    }

    /**
     * Gets allow_disable_ad
     * @return bool
     */
    public function getAllowDisableAd()
    {
        return $this->container['allow_disable_ad'];
    }

    /**
     * Sets allow_disable_ad
     * @param bool $allow_disable_ad Разрешено отключать рекламу anketolog.ru
     * @return $this
     */
    public function setAllowDisableAd($allow_disable_ad)
    {
        $this->container['allow_disable_ad'] = $allow_disable_ad;

        return $this;
    }

    /**
     * Gets allow_answer_filter
     * @return bool
     */
    public function getAllowAnswerFilter()
    {
        return $this->container['allow_answer_filter'];
    }

    /**
     * Sets allow_answer_filter
     * @param bool $allow_answer_filter Разрешено создавать фильтры ответов
     * @return $this
     */
    public function setAllowAnswerFilter($allow_answer_filter)
    {
        $this->container['allow_answer_filter'] = $allow_answer_filter;

        return $this;
    }

    /**
     * Gets allow_export
     * @return bool
     */
    public function getAllowExport()
    {
        return $this->container['allow_export'];
    }

    /**
     * Sets allow_export
     * @param bool $allow_export Разрешено экспортировать результаты опросов
     * @return $this
     */
    public function setAllowExport($allow_export)
    {
        $this->container['allow_export'] = $allow_export;

        return $this;
    }

    /**
     * Gets allow_survey_catalog
     * @return bool
     */
    public function getAllowSurveyCatalog()
    {
        return $this->container['allow_survey_catalog'];
    }

    /**
     * Sets allow_survey_catalog
     * @param bool $allow_survey_catalog Разрешено размещать анкету в каталоге для респондентов на сайте https://panel.anketolog.ru
     * @return $this
     */
    public function setAllowSurveyCatalog($allow_survey_catalog)
    {
        $this->container['allow_survey_catalog'] = $allow_survey_catalog;

        return $this;
    }

    /**
     * Gets allow_enable_captcha
     * @return bool
     */
    public function getAllowEnableCaptcha()
    {
        return $this->container['allow_enable_captcha'];
    }

    /**
     * Sets allow_enable_captcha
     * @param bool $allow_enable_captcha Разрешено включение капчи
     * @return $this
     */
    public function setAllowEnableCaptcha($allow_enable_captcha)
    {
        $this->container['allow_enable_captcha'] = $allow_enable_captcha;

        return $this;
    }

    /**
     * Gets allow_hide_question_count
     * @return bool
     */
    public function getAllowHideQuestionCount()
    {
        return $this->container['allow_hide_question_count'];
    }

    /**
     * Sets allow_hide_question_count
     * @param bool $allow_hide_question_count Разрешено отключать отображение вопросов в опросе
     * @return $this
     */
    public function setAllowHideQuestionCount($allow_hide_question_count)
    {
        $this->container['allow_hide_question_count'] = $allow_hide_question_count;

        return $this;
    }

    /**
     * Gets allow_office_url
     * @return bool
     */
    public function getAllowOfficeUrl()
    {
        return $this->container['allow_office_url'];
    }

    /**
     * Sets allow_office_url
     * @param bool $allow_office_url Разрешено задавать URL в контактах персональной страницы
     * @return $this
     */
    public function setAllowOfficeUrl($allow_office_url)
    {
        $this->container['allow_office_url'] = $allow_office_url;

        return $this;
    }

    /**
     * Gets allow_personalpage_image
     * @return bool
     */
    public function getAllowPersonalpageImage()
    {
        return $this->container['allow_personalpage_image'];
    }

    /**
     * Sets allow_personalpage_image
     * @param bool $allow_personalpage_image Разрешено менять логотип персональной страницы
     * @return $this
     */
    public function setAllowPersonalpageImage($allow_personalpage_image)
    {
        $this->container['allow_personalpage_image'] = $allow_personalpage_image;

        return $this;
    }

    /**
     * Gets allow_survey_image
     * @return bool
     */
    public function getAllowSurveyImage()
    {
        return $this->container['allow_survey_image'];
    }

    /**
     * Sets allow_survey_image
     * @param bool $allow_survey_image Разрешено менять логотип опроса
     * @return $this
     */
    public function setAllowSurveyImage($allow_survey_image)
    {
        $this->container['allow_survey_image'] = $allow_survey_image;

        return $this;
    }

    /**
     * Gets allow_hide_survey_name
     * @return bool
     */
    public function getAllowHideSurveyName()
    {
        return $this->container['allow_hide_survey_name'];
    }

    /**
     * Sets allow_hide_survey_name
     * @param bool $allow_hide_survey_name Разрешено скрывать отображение названия опроса от респондентов
     * @return $this
     */
    public function setAllowHideSurveyName($allow_hide_survey_name)
    {
        $this->container['allow_hide_survey_name'] = $allow_hide_survey_name;

        return $this;
    }

    /**
     * Gets allow_insert_video
     * @return bool
     */
    public function getAllowInsertVideo()
    {
        return $this->container['allow_insert_video'];
    }

    /**
     * Sets allow_insert_video
     * @param bool $allow_insert_video Разрешено вставлять видео в опрос
     * @return $this
     */
    public function setAllowInsertVideo($allow_insert_video)
    {
        $this->container['allow_insert_video'] = $allow_insert_video;

        return $this;
    }

    /**
     * Gets allow_personalpage_bgimage
     * @return bool
     */
    public function getAllowPersonalpageBgimage()
    {
        return $this->container['allow_personalpage_bgimage'];
    }

    /**
     * Sets allow_personalpage_bgimage
     * @param bool $allow_personalpage_bgimage Разрешено менять фоновое изображение у персональной страницы
     * @return $this
     */
    public function setAllowPersonalpageBgimage($allow_personalpage_bgimage)
    {
        $this->container['allow_personalpage_bgimage'] = $allow_personalpage_bgimage;

        return $this;
    }

    /**
     * Gets allow_personalpage_bgcolor
     * @return bool
     */
    public function getAllowPersonalpageBgcolor()
    {
        return $this->container['allow_personalpage_bgcolor'];
    }

    /**
     * Sets allow_personalpage_bgcolor
     * @param bool $allow_personalpage_bgcolor Разрешено менять цвет фонового изображения у персональной страницы
     * @return $this
     */
    public function setAllowPersonalpageBgcolor($allow_personalpage_bgcolor)
    {
        $this->container['allow_personalpage_bgcolor'] = $allow_personalpage_bgcolor;

        return $this;
    }

    /**
     * Gets allow_custom_css
     * @return bool
     */
    public function getAllowCustomCss()
    {
        return $this->container['allow_custom_css'];
    }

    /**
     * Sets allow_custom_css
     * @param bool $allow_custom_css Разрешено использовать настройку пользовательского CSS в опросе
     * @return $this
     */
    public function setAllowCustomCss($allow_custom_css)
    {
        $this->container['allow_custom_css'] = $allow_custom_css;

        return $this;
    }

    /**
     * Gets allow_survey_branchrules
     * @return bool
     */
    public function getAllowSurveyBranchrules()
    {
        return $this->container['allow_survey_branchrules'];
    }

    /**
     * Sets allow_survey_branchrules
     * @param bool $allow_survey_branchrules Разрешено настраивать логические правила у опроса
     * @return $this
     */
    public function setAllowSurveyBranchrules($allow_survey_branchrules)
    {
        $this->container['allow_survey_branchrules'] = $allow_survey_branchrules;

        return $this;
    }

    /**
     * Gets allow_survey_visiblerules
     * @return bool
     */
    public function getAllowSurveyVisiblerules()
    {
        return $this->container['allow_survey_visiblerules'];
    }

    /**
     * Sets allow_survey_visiblerules
     * @param bool $allow_survey_visiblerules Разрешено настраивать правила отображения вопросов
     * @return $this
     */
    public function setAllowSurveyVisiblerules($allow_survey_visiblerules)
    {
        $this->container['allow_survey_visiblerules'] = $allow_survey_visiblerules;

        return $this;
    }

    /**
     * Gets allow_randomization
     * @return bool
     */
    public function getAllowRandomization()
    {
        return $this->container['allow_randomization'];
    }

    /**
     * Sets allow_randomization
     * @param bool $allow_randomization Разрешено настраивать рандомизацию вопросов/страниц
     * @return $this
     */
    public function setAllowRandomization($allow_randomization)
    {
        $this->container['allow_randomization'] = $allow_randomization;

        return $this;
    }

    /**
     * Gets allow_related
     * @return bool
     */
    public function getAllowRelated()
    {
        return $this->container['allow_related'];
    }

    /**
     * Sets allow_related
     * @param bool $allow_related Разрешено настраивать подстановку вариантов
     * @return $this
     */
    public function setAllowRelated($allow_related)
    {
        $this->container['allow_related'] = $allow_related;

        return $this;
    }

    /**
     * Gets allow_calculate_nps
     * @return bool
     */
    public function getAllowCalculateNps()
    {
        return $this->container['allow_calculate_nps'];
    }

    /**
     * Sets allow_calculate_nps
     * @param bool $allow_calculate_nps Разрешен автоматический расчет простого индекса NPS
     * @return $this
     */
    public function setAllowCalculateNps($allow_calculate_nps)
    {
        $this->container['allow_calculate_nps'] = $allow_calculate_nps;

        return $this;
    }

    /**
     * Gets allow_insert_params
     * @return bool
     */
    public function getAllowInsertParams()
    {
        return $this->container['allow_insert_params'];
    }

    /**
     * Sets allow_insert_params
     * @param bool $allow_insert_params Разрешена вставка данных в анкету из параметров URL
     * @return $this
     */
    public function setAllowInsertParams($allow_insert_params)
    {
        $this->container['allow_insert_params'] = $allow_insert_params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\AnketologClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


