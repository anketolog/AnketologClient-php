<?php
/**
 * CampaignTargetingPoyezdkizhd
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Anketolog API 2.0
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CampaignTargetingPoyezdkizhd Class Doc Comment
 *
 * @category    Class */
 // @description Группа &#x60;Поездки ж/д транспортом&#x60; (+10 руб. к стоимости ответа)
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CampaignTargetingPoyezdkizhd implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CampaignTargetingPoyezdkizhd';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'is_enabled' => 'bool',
        'soversheniye_peredvizheniy' => 'string',
        'cel_peredvizheniy' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'is_enabled' => 'is_enabled',
        'soversheniye_peredvizheniy' => 'soversheniye_peredvizheniy',
        'cel_peredvizheniy' => 'cel_peredvizheniy'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'is_enabled' => 'setIsEnabled',
        'soversheniye_peredvizheniy' => 'setSoversheniyePeredvizheniy',
        'cel_peredvizheniy' => 'setCelPeredvizheniy'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'is_enabled' => 'getIsEnabled',
        'soversheniye_peredvizheniy' => 'getSoversheniyePeredvizheniy',
        'cel_peredvizheniy' => 'getCelPeredvizheniy'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const SOVERSHENIYE_PEREDVIZHENIY__0 = 'option_0';
    const SOVERSHENIYE_PEREDVIZHENIY__1 = 'option_1';
    const CEL_PEREDVIZHENIY__0 = 'option_0';
    const CEL_PEREDVIZHENIY__1 = 'option_1';
    const CEL_PEREDVIZHENIY__2 = 'option_2';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSoversheniyePeredvizheniyAllowableValues()
    {
        return [
            self::SOVERSHENIYE_PEREDVIZHENIY__0,
            self::SOVERSHENIYE_PEREDVIZHENIY__1,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCelPeredvizheniyAllowableValues()
    {
        return [
            self::CEL_PEREDVIZHENIY__0,
            self::CEL_PEREDVIZHENIY__1,
            self::CEL_PEREDVIZHENIY__2,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['soversheniye_peredvizheniy'] = isset($data['soversheniye_peredvizheniy']) ? $data['soversheniye_peredvizheniy'] : null;
        $this->container['cel_peredvizheniy'] = isset($data['cel_peredvizheniy']) ? $data['cel_peredvizheniy'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        $allowed_values = array("option_0", "option_1");
        if (!in_array($this->container['soversheniye_peredvizheniy'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'soversheniye_peredvizheniy', must be one of #{allowed_values}.";
        }

        $allowed_values = array("option_0", "option_1", "option_2");
        if (!in_array($this->container['cel_peredvizheniy'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'cel_peredvizheniy', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = array("option_0", "option_1");
        if (!in_array($this->container['soversheniye_peredvizheniy'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("option_0", "option_1", "option_2");
        if (!in_array($this->container['cel_peredvizheniy'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets is_enabled
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     * @param bool $is_enabled Группа включена
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets soversheniye_peredvizheniy
     * @return string
     */
    public function getSoversheniyePeredvizheniy()
    {
        return $this->container['soversheniye_peredvizheniy'];
    }

    /**
     * Sets soversheniye_peredvizheniy
     * @param string $soversheniye_peredvizheniy Параметр `Совершение передвижений`  * `option_0` - совершал за последний год * `option_1` - не совершал за последний год
     * @return $this
     */
    public function setSoversheniyePeredvizheniy($soversheniye_peredvizheniy)
    {
        $allowed_values = array('option_0', 'option_1');
        if (!in_array($soversheniye_peredvizheniy, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'soversheniye_peredvizheniy', must be one of 'option_0', 'option_1'");
        }
        $this->container['soversheniye_peredvizheniy'] = $soversheniye_peredvizheniy;

        return $this;
    }

    /**
     * Gets cel_peredvizheniy
     * @return string
     */
    public function getCelPeredvizheniy()
    {
        return $this->container['cel_peredvizheniy'];
    }

    /**
     * Sets cel_peredvizheniy
     * @param string $cel_peredvizheniy Параметр `Цель передвижений на поездах`  * `option_0` - работа, бизнес * `option_1` - отдых * `option_2` - и работа, и отдых
     * @return $this
     */
    public function setCelPeredvizheniy($cel_peredvizheniy)
    {
        $allowed_values = array('option_0', 'option_1', 'option_2');
        if (!in_array($cel_peredvizheniy, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'cel_peredvizheniy', must be one of 'option_0', 'option_1', 'option_2'");
        }
        $this->container['cel_peredvizheniy'] = $cel_peredvizheniy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


